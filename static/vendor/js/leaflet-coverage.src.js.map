{"version":3,"file":"leaflet-coverage.src.js","sources":["../../../../../\u0000babelHelpers","src/controls/utils.js","src/controls/DiscreteLegend.js","src/controls/ContinuousLegend.js","src/controls/Legend.js","src/util/EventMixin.js","src/controls/TimeAxis.js","src/controls/Dropdown.js","src/controls/VerticalAxis.js","../../../../../\u0000commonjsHelpers","node_modules/iota-array/iota.js","node_modules/is-buffer/index.js","node_modules/ndarray/ndarray.js","src/layers/palettes.js","src/layers/PaletteMixin.js","src/layers/CoverageMixin.js","src/layers/Grid.js","src/layers/CircleMarkerMixin.js","src/layers/Point.js","src/layers/Trajectory.js","src/layers/PointSeries.js","src/util/kdTree.js","src/layers/PointCollection.js","src/layers/VerticalProfile.js","src/layers/VerticalProfileCollection.js","src/layers/MultiPolygon.js","src/layers/PolygonSeries.js","src/util/constants.js","src/layers/factory.js","src/layers/ParameterSync.js","src/popups/VerticalProfilePlot.js","src/popups/TimeSeriesPlot.js","src/popups/DraggablePopupMixin.js","src/popups/ValuePopup.js","src/popups/DraggableValuePopup.js"],"sourcesContent":["var babelHelpers = {};\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexport var jsx = function () {\n  var REACT_ELEMENT_TYPE = typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\") || 0xeac7;\n  return function createRawReactElement(type, props, key, children) {\n    var defaultProps = type && type.defaultProps;\n    var childrenLength = arguments.length - 3;\n\n    if (!props && childrenLength !== 0) {\n      props = {};\n    }\n\n    if (props && defaultProps) {\n      for (var propName in defaultProps) {\n        if (props[propName] === void 0) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    } else if (!props) {\n      props = defaultProps || {};\n    }\n\n    if (childrenLength === 1) {\n      props.children = children;\n    } else if (childrenLength > 1) {\n      var childArray = Array(childrenLength);\n\n      for (var i = 0; i < childrenLength; i++) {\n        childArray[i] = arguments[i + 3];\n      }\n\n      props.children = childArray;\n    }\n\n    return {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key === undefined ? null : '' + key,\n      ref: null,\n      props: props,\n      _owner: null\n    };\n  };\n}();\n\nexport var asyncIterator = function (iterable) {\n  if (typeof Symbol === \"function\") {\n    if (Symbol.asyncIterator) {\n      var method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      return iterable[Symbol.iterator]();\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n};\n\nexport var asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\nexport var asyncGeneratorDelegate = function (inner, awaitWrap) {\n  var iter = {},\n      waiting = false;\n\n  function pump(key, value) {\n    waiting = true;\n    value = new Promise(function (resolve) {\n      resolve(inner[key](value));\n    });\n    return {\n      done: false,\n      value: awaitWrap(value)\n    };\n  }\n\n  ;\n\n  if (typeof Symbol === \"function\" && Symbol.iterator) {\n    iter[Symbol.iterator] = function () {\n      return this;\n    };\n  }\n\n  iter.next = function (value) {\n    if (waiting) {\n      waiting = false;\n      return value;\n    }\n\n    return pump(\"next\", value);\n  };\n\n  if (typeof inner.throw === \"function\") {\n    iter.throw = function (value) {\n      if (waiting) {\n        waiting = false;\n        throw value;\n      }\n\n      return pump(\"throw\", value);\n    };\n  }\n\n  if (typeof inner.return === \"function\") {\n    iter.return = function (value) {\n      return pump(\"return\", value);\n    };\n  }\n\n  return iter;\n};\n\nexport var asyncToGenerator = function (fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n\nexport var classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nexport var createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexport var defineEnumerableProperties = function (obj, descs) {\n  for (var key in descs) {\n    var desc = descs[key];\n    desc.configurable = desc.enumerable = true;\n    if (\"value\" in desc) desc.writable = true;\n    Object.defineProperty(obj, key, desc);\n  }\n\n  return obj;\n};\n\nexport var defaults = function (obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n};\n\nexport var defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexport var get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nexport var inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar _instanceof = function (left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n};\n\nexport var interopRequireDefault = function (obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n};\n\nexport var interopRequireWildcard = function (obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n};\n\nexport var newArrowCheck = function (innerThis, boundThis) {\n  if (innerThis !== boundThis) {\n    throw new TypeError(\"Cannot instantiate an arrow function\");\n  }\n};\n\nexport var objectDestructuringEmpty = function (obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n};\n\nexport var objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nexport var possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nexport var selfGlobal = typeof global === \"undefined\" ? self : global;\n\nexport var set = function set(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\nexport var slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexport var slicedToArrayLoose = function (arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    var _arr = [];\n\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n      _arr.push(_step.value);\n\n      if (i && _arr.length === i) break;\n    }\n\n    return _arr;\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n};\n\nexport var taggedTemplateLiteral = function (strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n};\n\nexport var taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\nexport var temporalRef = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  } else {\n    return val;\n  }\n};\n\nexport var temporalUndefined = {};\n\nexport var toArray = function (arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n};\n\nexport var toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nbabelHelpers;\n\nexport { _typeof as typeof, _extends as extends, _instanceof as instanceof }","/**\n * Returns the first child element of parent (fall-back to document if not given)\n * matching the given selector.\n * \n * @private\n */\nexport function $$ (selector, parent) {\n  if (typeof parent === 'string') {\n    parent = $$(parent)\n  }\n  parent = parent || document\n  return parent.querySelector(selector)\n}\n\n/**\n * Returns all child elements of parent (fall-back to document if not given)\n * matching the given selector as an array.\n * \n * @private\n */\nexport function $ (selector, parent) {\n  if (typeof parent === 'string') {\n    parent = $$(parent)\n  }\n  parent = parent || document\n  return [...parent.querySelectorAll(selector)]\n}\n\n/**\n * Turns an HTML string into a DOM element.\n * The HTML markup must have a single root node not prepended by any whitespace.\n * \n * @example \n * var s = '<li>text</li>'\n * var el = C.HTML(s)\n * document.body.appendChild(el)\n * \n * @private\n */\nexport function HTML (html) {\n  let div = document.createElement('div')\n  div.innerHTML = html\n  let element = div.firstChild\n  return element\n}\n\n/**\n * Inject HTML and CSS into the DOM.\n * \n * @param html The html to inject at the end of the body element. Must have a single root node without surrounding whitespace.\n * @param css The CSS styles to inject at the end of the head element.\n * \n * @private\n */\nexport function inject (html, css) {\n  // inject default template and CSS into DOM\n  if (html) {\n    document.body.appendChild(HTML(html))\n  }\n  \n  if (css) {\n    let style = document.createElement('style')\n    style.type = 'text/css'\n    if (style.styleSheet){\n      style.styleSheet.cssText = css\n    } else {\n      style.appendChild(document.createTextNode(css))\n    }\n    document.head.appendChild(style)\n  }\n}\n\n/**\n * @private\n */\nexport function fromTemplate (id) {\n  let node = $$('#' + id)\n  // browsers without <template> support don't wrap everything in .content\n  if ('content' in node) {\n    node = node.content\n  }\n  return document.importNode(node, true).children[0]\n}","import L from 'leaflet'\n\nimport {inject, fromTemplate, $$} from './utils.js'\nimport {getLanguageTag, getLanguageString} from 'covutils'\n\nconst DEFAULT_TEMPLATE_ID = 'template-coverage-parameter-discrete-legend'\nconst DEFAULT_TEMPLATE = `<template id=\"${DEFAULT_TEMPLATE_ID}\">\n  <div class=\"leaflet-coverage-control legend discrete-legend\">\n    <div class=\"legend-title-container\"><strong class=\"legend-title\"></strong></div>\n    <div class=\"legend-palette discrete-legend-palette\"></div>\n  </div>\n</template>`\n\n/**\n * Displays a discrete palette legend for the parameter displayed by the given\n * Coverage layer. Supports category parameters only at the moment.\n * \n * @example <caption>Coverage data layer</caption>\n * new C.DiscreteLegend(covLayer).addTo(map)\n * // changing the palette of the layer automatically updates the legend \n * covLayer.palette = C.discretePalette(['red', 'blue'])\n * \n * @example <caption>Fake layer</caption>\n * var fakeLayer = {\n *   parameter: {\n *     observedProperty: {\n *       label: { en: 'Land cover' },\n *       categories: [{\n *         label: { en: 'Land' }\n *       }, {\n *         label: { en: 'Water' }\n *       }]\n *     }\n *   },\n *   palette: C.directPalette(['gray', 'blue']) // CSS colors in category order\n * }\n * var legend = new C.DiscreteLegend(fakeLayer).addTo(map)\n * \n * // change the palette and trigger a manual update\n * fakeLayer.palette = C.discretePalette(['red', 'blue'])\n * legend.update()\n * \n * @extends {L.Control}\n */\nexport class DiscreteLegend extends L.Control {\n  \n  /**\n   * Creates a discrete legend control.\n   * \n   * @param {object} covLayer \n   *   The coverage data layer, or any object with <code>palette</code>\n   *   and <code>parameter</code> properties.\n   *   If the object has <code>on</code>/<code>off</code> methods, then the legend will\n   *   listen for <code>\"paletteChange\"</code> events and update itself automatically.\n   *   If the layer fires a <code>\"remove\"</code> event, then the legend will remove itself\n   *   from the map. \n   * @param {object} [options] Legend options.\n   * @param {string} [options.position='bottomright'] The initial position of the control (see Leaflet docs).\n   * @param {string} [options.language] A language tag, indicating the preferred language to use for labels.\n   * @param {string} [options.templateId] Uses the HTML element with the given id as template.\n   */\n  constructor (covLayer, options = {}) {\n    super({position: options.position || 'bottomright'})\n    this._covLayer = covLayer\n    this._templateId = options.templateId || DEFAULT_TEMPLATE_ID\n    this._language = options.language\n    \n    if (!options.templateId && document.getElementById(DEFAULT_TEMPLATE_ID) === null) {\n      inject(DEFAULT_TEMPLATE)\n    }   \n\n    if (covLayer.on) {\n      this._remove = () => this.remove()\n      this._update = () => this._doUpdate(false)\n      covLayer.on('remove', this._remove)\n    }\n  }\n  \n  /**\n   * Triggers a manual update of the legend.\n   * \n   * Useful if the supplied coverage data layer is not a real layer\n   * and won't fire the necessary events for automatic updates.\n   */\n  update () {\n    this._doUpdate(true)\n  }\n  \n  _doUpdate (fullUpdate) {\n    let el = this._el\n    \n    if (fullUpdate) {\n      let param = this._covLayer.parameter\n      // if requested language doesn't exist, use the returned one for all other labels\n      this._language = getLanguageTag(param.observedProperty.label, this._language) \n      let title = getLanguageString(param.observedProperty.label, this._language)\n      $$('.legend-title', el).innerHTML = title\n    }\n    \n    let palette = this._covLayer.palette\n    let param = this._covLayer.parameter\n    \n    let html = ''\n    for (let i=0; i < palette.steps; i++) {\n      let cat = getLanguageString(param.observedProperty.categories[i].label, this._language)\n      html += `\n        <i style=\"background:rgb(${palette.red[i]}, ${palette.green[i]}, ${palette.blue[i]})\"></i>\n        ${cat}\n        <br>`\n    }\n    \n    $$('.legend-palette', el).innerHTML = html\n  }\n  \n  /**\n   * @override\n   * @ignore\n   */\n  onAdd (map) {\n    this._map = map\n    \n    if (this._covLayer.on) {\n      this._covLayer.on('paletteChange', this._update)\n    }\n    \n    this._el = fromTemplate(this._templateId)\n    this.update()\n    return this._el\n  }\n  \n  /**\n   * @override\n   * @ignore\n   */\n  onRemove () {\n    if (this._covLayer.off) {\n      this._covLayer.off('remove', this._remove)\n      this._covLayer.off('paletteChange', this._update)\n    }\n  }\n}\n","import L from 'leaflet'\n\nimport {inject, fromTemplate, $$, $} from './utils.js'\nimport {getLanguageTag, getLanguageString, stringifyUnit} from 'covutils'\n\nconst DEFAULT_TEMPLATE_ID = 'template-coverage-parameter-continuous-legend'\nconst DEFAULT_TEMPLATE = `<template id=\"${DEFAULT_TEMPLATE_ID}\">\n  <div class=\"leaflet-coverage-control legend continuous-legend\">\n    <div style=\"margin-bottom:3px\" class=\"legend-title-container\">\n      <strong class=\"legend-title\"></strong>\n    </div>\n    <div style=\"display: inline-block; height: 144px; float:left\">\n      <span style=\"height: 136px; width: 18px; display: block; margin-top: 9px;\" class=\"legend-palette\"></span>\n    </div>\n    <div style=\"display: inline-block; float:left; height:153px\">\n      <table style=\"height: 100%;\">\n        <tr><td style=\"vertical-align:top\"><span class=\"legend-max\"></span> <span class=\"legend-uom\"></span></td></tr>\n        <tr><td><span class=\"legend-current\"></span></td></tr>\n        <tr><td style=\"vertical-align:bottom\"><span class=\"legend-min\"></span> <span class=\"legend-uom\"></span></td></tr>\n      </table>\n    </div>\n  </div>\n</template>`\n\n/**\n * Displays a continuous legend for the parameter displayed by the given\n * coverage data layer.\n * \n * Note that this class should only be used if the palette is continuous\n * by nature, typically having at least 100-200 color steps.\n * If there are only a few color steps (e.g. 10), then this class\n * will still show a continuous legend due to its rendering technique\n * (CSS gradient based).\n * \n * @example <caption>Coverage data layer</caption>\n * new C.ContinuousLegend(covLayer).addTo(map)\n * // changing the palette of the layer automatically updates the legend \n * covLayer.palette = C.linearPalette(['blue', 'red'])\n * \n * @example <caption>Fake layer</caption>\n * var fakeLayer = {\n *   parameter: {\n *     observedProperty: {\n *       label: { en: 'Temperature' }\n *     },\n *     unit: {\n *       symbol: { value: 'K' },\n *       label: { en: 'Kelvin' }\n *     }\n *   },\n *   palette: linearPalette(['#FFFFFF', '#000000']),\n *   paletteExtent: [0, 10]\n * }\n * var legend = new C.ContinuousLegend(fakeLayer).addTo(map)\n * \n * // change the palette and trigger a manual update\n * fakeLayer.palette = C.linearPalette(['blue', 'red'])\n * legend.update()\n * \n * @extends {L.Control}\n */\nexport class ContinuousLegend extends L.Control {\n  \n  /**\n   * Creates a continuous legend control.\n   * \n   * @param {object} covLayer \n   *   The coverage data layer, or any object with <code>palette</code>,\n   *   <code>paletteExtent</code>, and <code>parameter</code> properties.\n   *   If the object has <code>on</code>/<code>off</code> methods, then the legend will\n   *   listen for <code>\"paletteChange\"</code> and <code>\"paletteExtentChange\"</code>\n   *   events and update itself automatically.\n   *   If the layer fires a <code>\"remove\"</code> event, then the legend will remove itself\n   *   from the map. \n   * @param {object} [options] Legend options.\n   * @param {string} [options.position='bottomright'] The initial position of the control (see Leaflet docs).\n   * @param {string} [options.language] A language tag, indicating the preferred language to use for labels.\n   * @param {string} [options.templateId] Uses the HTML element with the given id as template.\n   */\n  constructor (covLayer, options = {}) {\n    super({position: options.position || 'bottomright'})\n    this._covLayer = covLayer\n    this._templateId = options.templateId || DEFAULT_TEMPLATE_ID\n    this._language = options.language\n    \n    if (!options.templateId && document.getElementById(DEFAULT_TEMPLATE_ID) === null) {\n      inject(DEFAULT_TEMPLATE)\n    }   \n\n    if (covLayer.on) {\n      this._remove = () => this.remove()\n      this._update = () => this._doUpdate(false)\n      covLayer.on('remove', this._remove)\n    }\n  }\n  \n  /**\n   * Triggers a manual update of the legend.\n   * \n   * Useful if the supplied coverage data layer is not a real layer\n   * and won't fire the necessary events for automatic updates.\n   */\n  update () {\n    this._doUpdate(true)\n  }\n  \n  _doUpdate (fullUpdate) {\n    let el = this._el\n    \n    if (fullUpdate) {\n      let param = this._covLayer.parameter\n      // if requested language doesn't exist, use the returned one for all other labels\n      let language = getLanguageTag(param.observedProperty.label, this._language) \n      let title = getLanguageString(param.observedProperty.label, language)\n      let unit = stringifyUnit(param.unit, language)\n       $$('.legend-title', el).innerHTML = title\n       $('.legend-uom', el).forEach(u => u.innerHTML = unit)        \n    }\n    \n    let palette = this._covLayer.palette\n    let [low,high] = this._covLayer.paletteExtent\n    \n    $$('.legend-min', el).innerHTML = low.toFixed(2)\n    $$('.legend-max', el).innerHTML = high.toFixed(2)\n\n    let gradient = ''\n    for (let i = 0; i < palette.steps; i++) {\n      if (i > 0) gradient += ','\n      gradient += 'rgb(' + palette.red[i] + ',' + palette.green[i] + ',' + palette.blue[i] + ')'\n    }\n    \n    $$('.legend-palette', el).style.background = 'transparent linear-gradient(to top, ' + gradient + ') repeat scroll 0% 0%'\n  }\n  \n  /**\n   * @override\n   * @ignore\n   */\n  onAdd (map) {\n    this._map = map\n    \n    if (this._covLayer.on) {\n      this._covLayer.on('paletteChange', this._update)\n      this._covLayer.on('paletteExtentChange', this._update)\n    }\n    \n    this._el = fromTemplate(this._templateId)\n    this.update()\n    return this._el\n  }\n  \n  /**\n   * @override\n   * @ignore\n   */\n  onRemove () {\n    if (this._covLayer.off) {\n      this._covLayer.off('remove', this._remove)\n      this._covLayer.off('paletteChange', this._update)\n      this._covLayer.off('paletteExtentChange', this._update)\n    }\n  }\n  \n}\n","import {DiscreteLegend} from './DiscreteLegend.js'\nimport {ContinuousLegend} from './ContinuousLegend.js'\n\n/**\n * Convenience function that returns a legend control\n * based on the coverage parameter type.\n * For categorical parameters this returns a {@link DiscreteLegend},\n * otherwise a {@link ContinuousLegend} instance.\n * \n * Note that custom HTML templates cannot be used with this function.\n * If this is necessary, consider using the individual legend classes\n * instead. \n * \n * @example <caption>Coverage data layer</caption>\n * var legend = C.legend(covLayer).addTo(map)\n * \n * @example <caption>Fake layer</caption>\n * // see DiscreteLegend and ContinuousLegend docs\n * \n * @param {object} layer The coverage data layer.\n * @param {object} [options] Legend options.\n * @param {string} [options.position='bottomright'] The initial position of the control (see Leaflet docs).\n * @param {string} [options.language] A language tag, indicating the preferred language to use for labels.\n * @return {DiscreteLegend|ContinuousLegend}\n */\nexport function legend (layer, options = {}) {\n  options.position = options.position || 'bottomright'\n  if (layer.parameter.observedProperty.categories) {\n    return new DiscreteLegend(layer, options)\n  } else {\n    return new ContinuousLegend(layer, options)\n  }\n}\n","import L from 'leaflet'\n\nlet Evented = L.Evented.prototype\n\n/**\n * Wraps Leaflet's {@link L.Evented} for use within class expressions.\n * \n * @see http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\n * \n * @param {class} base The base class.\n * @return {class} The base class with Leaflet's {@link L.Evented}.\n */\nexport function EventMixin (base) {\n  let clazz = class extends base {}\n  for (let key in Evented) {\n    clazz.prototype[key] = Evented[key]\n  }\n  return clazz\n}\n","import L from 'leaflet'\n\nimport {$$, fromTemplate, inject, HTML} from './utils.js'\nimport {EventMixin} from '../util/EventMixin.js'\n\nconst DEFAULT_TEMPLATE_ID = 'template-coverage-timeaxis'\nconst DEFAULT_TEMPLATE = `<template id=\"${DEFAULT_TEMPLATE_ID}\">\n<div class=\"leaflet-coverage-control form-inline\" style=\"clear:none\">\n  <strong class=\"title\">Time</strong><br>\n  <div class=\"form-group\">\n    <select name=\"date\" class=\"date form-control\"></select>\n  </div>\n  <div class=\"form-group\">\n    <select name=\"time\" class=\"time form-control\"></select>\n  </div>\n</div>\n</template>`\n\n/**\n * The `change` event, signalling that a different time entry has been selected.\n * \n * @typedef {L.Event} TimeAxis#change\n * @property {Date} time The time that has been selected.\n */\n\n/**\n * Displays a simple date/time picker for a coverage data layer by grouping\n * time steps into dates and times.\n * \n * @example <caption>Coverage data layer</caption>\n * new C.TimeAxis(covLayer).addTo(map)\n * // Selecting a date/time automatically sets the 'time' property in the layer.\n * // Similarly, when the layer fires an 'axisChange' event with {axis: 'time'}\n * // the control reflects that change.\n * \n * @example <caption>Fake layer</caption>\n * var times = ['2000-01-01T00:00:00Z','2000-01-01T05:00:00Z'].map(s => new Date(s))\n * var fakeLayer = {\n *   timeSlices: times,\n *   time: times[1] // select the second time step initially\n * }\n * var timeAxis = new C.TimeAxis(fakeLayer).addTo(map)\n * \n * // change the time and trigger a manual update\n * fakeLayer.time = times[0]\n * timeAxis.update()\n * \n * @extends {L.Control}\n * @extends {EventMixin}\n * \n * @emits {TimeAxis#change} when a different time entry has been selected\n */\nexport class TimeAxis extends EventMixin(L.Control) {\n  \n  /**\n   * Creates a time axis control.\n   * \n   * @param {object} covLayer \n   *   The coverage data layer, or any object with `timeSlices` and `time` properties.\n   *   If the object has `on`/`off` methods, then the control will\n   *   listen for `axisChange` events with `{axis: 'time'}` and update itself automatically.\n   *   If the layer fires a `remove` event, then the control will remove itself from the map.\n   * @param {object} [options] Control options.\n   * @param {string} [options.position='topleft'] The initial position of the control (see Leaflet docs).\n   * @param {string} [options.title='Time'] The label to show above the date/time picker.\n   * @param {string} [options.templateId] Element ID of an alternative HTML `<template>` element to use.\n   */\n  constructor (covLayer, options = {}) {\n    super({position: options.position || 'topleft'})\n    this._templateId = options.templateId || DEFAULT_TEMPLATE_ID\n    this._title = options.title || 'Time'\n    this._covLayer = covLayer\n\n    if (!options.templateId && document.getElementById(DEFAULT_TEMPLATE_ID) === null) {\n      inject(DEFAULT_TEMPLATE)\n    } \n\n    if (covLayer.on) {\n      this._remove = () => this.remove()\n      covLayer.on('remove', this._remove)\n      \n      this._axisListener = e => {\n        if (e.axis === 'time') this.update()\n      }\n    }\n    \n    let timeSlices = this._covLayer.timeSlices\n    let dateMap = new Map() // UTC timestamp (representing the date only) -> array of Date objects\n    for (let t of timeSlices) {\n      let dateTimestamp = new Date(Date.UTC(t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate())).getTime()\n      if (!dateMap.has(dateTimestamp)) {\n        dateMap.set(dateTimestamp, [])\n      }\n      dateMap.get(dateTimestamp).push(t)\n    }\n    this._dateMap = dateMap\n  }\n  \n  /**\n   * @ignore\n   */\n  onAdd (map) {\n    this._map = map\n    \n    if (this._covLayer.on) {\n      this._covLayer.on('axisChange', this._axisListener)\n    }\n    \n    let el = fromTemplate(this._templateId)\n    this._el = el\n    L.DomEvent.disableClickPropagation(el)\n    \n    if (this._title) {\n      $$('.title', el).innerHTML = this._title\n    }\n    \n    for (let dateTimestamp of this._dateMap.keys()) {\n      let dateStr = getUTCDateString(dateTimestamp)\n      $$('.date', el).appendChild(HTML(`<option value=\"${dateStr}\">${dateStr}</option>`))\n    }\n    $$('.date', el).disabled = this._dateMap.size === 1\n    \n    $$('.date', el).addEventListener('change', event => {\n      let dateTimestamp = getUTCTimestampDateOnly(event.target.value)\n      let timeSlice = this._dateMap.get(dateTimestamp)[0]\n      this._covLayer.time = timeSlice\n      this._initTimeSelect(dateTimestamp)\n      this.fire('change', {time: timeSlice})\n    })\n    $$('.time', el).addEventListener('change', event => {\n      let dateStr = $$('.date', el).value\n      let timeStr = event.target.value\n      let time = new Date(dateStr + 'T' + timeStr)\n      this._covLayer.time = time\n      this.fire('change', {time: time})\n    })\n    \n    this.update()\n    \n    return el\n  }\n  \n  /**\n   * @ignore\n   */\n  onRemove () {\n    if (this._covLayer.off) {\n      this._covLayer.off('remove', this._remove)\n      this._covLayer.off('axisChange', this._axisListener)\n    }\n  }\n  \n  /**\n   * Triggers a manual update of the date/time picker based on the\n   * `time` property of the layer.\n   * \n   * Useful if the supplied coverage data layer is not a real layer\n   * and won't fire the necessary events for automatic updates.\n   */\n  update () {\n    let covTime = this._covLayer.time\n    if (!covTime) return\n    let el = this._el\n    // selects the date set in the cov layer, populates the time select, and selects the time\n    let dateTimestamp = getUTCTimestampDateOnly(covTime.toISOString())\n    let dateStr = getUTCDateString(dateTimestamp)\n    $$('.date', el).value = dateStr \n    \n    this._initTimeSelect(dateTimestamp)\n    \n    let timeStr = covTime.toISOString().substr(11)\n    $$('.time', el).value = timeStr\n  }\n  \n  _initTimeSelect (dateTimestamp) {\n    let el = this._el\n    let timeSelect = $$('.time', el)\n    timeSelect.innerHTML = ''\n    let times = this._dateMap.get(dateTimestamp)\n    for (let timeSlice of times) {\n      let timeStr = timeSlice.toISOString().substr(11)\n      timeSelect.appendChild(HTML(`<option value=\"${timeStr}\">${timeStr}</option>`))\n    }\n    timeSelect.disabled = times.length === 1\n  }\n    \n}\n\nfunction getUTCTimestampDateOnly (dateStr) {\n  let year = parseInt(dateStr.substr(0, 4))\n  let month = parseInt(dateStr.substr(5, 2))\n  let day = parseInt(dateStr.substr(8, 2))\n  return Date.UTC(year, month-1, day)\n}\n\nfunction getUTCDateString (timestamp) {\n  let iso = new Date(timestamp).toISOString()\n  let date = iso.substr(0, 10)\n  return date\n}\n\n","import L from 'leaflet'\n\nimport {$$, fromTemplate, inject, HTML} from './utils.js'\nimport {EventMixin} from '../util/EventMixin.js'\n\nconst DEFAULT_TEMPLATE_ID = 'template-coverage-dropdown'\nconst DEFAULT_TEMPLATE = `<template id=\"${DEFAULT_TEMPLATE_ID}\">\n<div class=\"leaflet-coverage-control\" style=\"clear:none\">\n  <strong class=\"select-title\"></strong><br>\n  <select class=\"form-control\"></select>\n</div>\n</template>`\n\n/**\n * The `change` event, signalling that a different dropdown element has been selected.\n * \n * @typedef {L.Event} Dropdown#change\n * @property {string} value The value of the selected item.\n */\n\n/**\n * An event-enabled dropdown control with optional title.\n * \n * Used in {@link VerticalAxis}.\n * \n * @extends {L.Control}\n * @extends {EventMixin}\n * \n * @emits {Dropdown#change} when a different dropdown element has been selected\n */\nexport class Dropdown extends EventMixin(L.Control) {\n  /**\n   * @param {Array<Object>} choices The dropdown items given as an array of `{value, label}` objects.\n   * @param {Object} [options] The options object.\n   * @param {string} [options.position='topleft'] The position of the control (one of the map corners).\n   *    Possible values are 'topleft', 'topright', 'bottomleft' or 'bottomright'.\n   * @param {string} [options.title] The dropdown title that is displayed above the dropdown.\n   * @param {string} [options.value] Value of the item that should be initially selected.\n   * @param {string} [options.templateId] Element ID of an alternative HTML `<template>` element to use.\n   */\n  constructor (choices, options={}) {\n    super(options.position ? {position: options.position} : {position: 'topleft'})\n    this._templateId = options.templateId || DEFAULT_TEMPLATE_ID\n    this._title = options.title || ''\n    this._choices = choices\n    this._value = options.value || choices[0].value\n\n    if (!options.templateId && document.getElementById(DEFAULT_TEMPLATE_ID) === null) {\n      inject(DEFAULT_TEMPLATE)\n    } \n  }\n  \n  /**\n   * @override\n   * @ignore\n   */\n  onAdd (map) {\n    let el = fromTemplate(this._templateId)\n    this._el = el\n    \n    L.DomEvent.disableClickPropagation(el)\n    \n    $$('.select-title', el).innerHTML = this._title\n    \n    for (let {value, label} of this._choices) {\n      $$('select', el).appendChild(HTML(`<option value=\"${value}\">${label}</option>`))\n    }\n    $$('select', el).disabled = this._choices.length <= 1\n    this.value = this._value\n    \n    $$('select', el).addEventListener('change', event => {\n      this._value = event.target.value\n      this.fire('change', {value: event.target.value})\n    })\n    \n    return el\n  }\n  \n  /** \n   * Returns the value of the currently selected item.\n   * \n   * @type {string}\n   * \n   * @example\n   * let current = dropdown.value\n   */\n  get value () {\n    return this._value\n  }\n  \n  /** \n   * Selects the item with the given value.\n   * \n   * @type {string}\n   * \n   * @example\n   * dropdown.value = 'foobar'\n   */\n  set value (val) {\n    $$('select', this._el).value = val\n  }\n    \n}\n","import L from 'leaflet'\n\nimport {Dropdown} from './Dropdown.js'\nimport {EventMixin} from '../util/EventMixin.js'\nimport {getLanguageString, stringifyUnit} from 'covutils'\n\n/**\n * The `change` event, signalling that a different vertical coordinate value has been selected.\n * \n * @typedef {L.Event} VerticalAxis#change\n * @property {number} vertical The vertical coordinate value that has been selected.\n */\n\n/**\n * Displays a simple vertical coordinate dropdown selector for a coverage data layer.\n * \n * @example <caption>Coverage data layer</caption>\n * new C.VerticalAxis(covLayer).addTo(map)\n * // Selecting a vertical coordinate automatically sets the 'vertical' property in the layer.\n * // Similarly, when the layer fires an 'axisChange' event with {axis: 'vertical'}\n * // the control reflects that change.\n * \n * @example <caption>Fake layer</caption>\n * var heights = [0,10,20,50,100,500,1000]\n * var fakeLayer = {\n *   verticalSlices: heights,\n *   vertical: heights[1], // select the second height step initially\n *   crsVerticalAxis: {\n *     name: { \n *       en: 'Gravity-related height'\n *     },\n *     unit: {\n *       symbol: 'm'\n *     }\n *   }\n * }\n * var verticalAxis = new C.VerticalAxis(fakeLayer).addTo(map)\n * \n * // change the height and trigger a manual update\n * fakeLayer.vertical = heights[0]\n * verticalAxis.update()\n * \n * @extends {L.Layer}\n * \n * @emits {VerticalAxis#change} when a different entry has been selected\n */\nexport class VerticalAxis extends L.Layer {\n  \n  /**\n   * Creates a vertical axis control.\n   * \n   * @param {object} covLayer \n   *   The coverage data layer, or any object with `verticalSlices`\n   *   and `vertical` properties, optionally `crsVerticalAxis` property.\n   *   If the object has `on`/`off` methods, then the control will\n   *   listen for `axisChange` events with `{axis: 'vertical'}`\n   *   and update itself automatically.\n   *   If the layer fires a `remove` event, then the control will remove itself\n   *   from the map.\n   * @param {object} [options] Control options.\n   * @param {string} [options.position='topleft'] The initial position of the control (see Leaflet docs).\n   * @param {string} [options.title='Vertical'] \n   *   The label to show above the control if `covLayer.crsVerticalAxis.name` is missing.\n   * @param {string} [options.templateId] Element ID of an alternative HTML `<template>` element to use. \n   */\n  constructor (covLayer, options = {}) {\n    super()\n    this._templateId = options.templateId\n    this._covLayer = covLayer\n    this._title = options.title || 'Vertical'\n    this._position = options.position || 'topleft'\n\n    if (covLayer.on) {\n      this._remove = () => this.remove()\n      covLayer.on('remove', this._remove)\n      \n      this._axisListener = e => {\n        if (e.axis === 'vertical') this.update()\n      }\n    }\n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  onAdd (map) {\n    this._map = map\n    \n    if (this._covLayer.on) {\n      this._covLayer.on('axisChange', this._axisListener)\n    }\n    \n    let crsVertAxis = this._covLayer.crsVerticalAxis || {}\n    let title = crsVertAxis.name ? getLanguageString(crsVertAxis.name) : this._title\n    let unit = stringifyUnit(crsVertAxis.unit)\n    if (unit) {\n      unit = ' ' + unit\n    }\n    \n    let choices = []\n    let vals = this._covLayer.verticalSlices\n    for (let i=0; i < vals.length; i++) {\n      choices.push({\n        value: i.toString(),\n        label: vals[i] + unit\n      })\n    }\n      \n    this._dropdown = new Dropdown(choices, {\n      templateId: this._templateId,\n      position: this._position,\n      title,\n      value: this._getVerticalIndex().toString()\n    }).on('change', event => {\n      let i = parseInt(event.value)\n      let val = this._covLayer.verticalSlices[i]\n      this._covLayer.vertical = val\n      this.fire('change', {vertical: val})\n    }).addTo(map)\n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  onRemove (map) {\n    this._dropdown.remove()\n    if (this._covLayer.off) {\n      this._covLayer.off('remove', this._remove)\n      this._covLayer.off('axisChange', this._axisListener)\n    }\n  }\n    \n  _getVerticalIndex () {\n    let vals = this._covLayer.verticalSlices\n    let i = vals.indexOf(this._covLayer.vertical)\n    return i\n  }\n  \n  /**\n   * Triggers a manual update of the vertical axis control based on the\n   * `vertical` property of the layer.\n   * \n   * Useful if the supplied coverage data layer is not a real layer\n   * and won't fire the necessary events for automatic updates.\n   */\n  update () {\n    let i = this._getVerticalIndex()\n    this._dropdown.value = i.toString()\n  }\n    \n}\n","\nexport var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {}\n\nexport function interopDefault(ex) {\n\treturn ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nexport function createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}","\"use strict\"\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","var iota = require(\"iota-array\")\nvar isBuffer = require(\"is-buffer\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n      case \"[object BigInt64Array]\":\n        return \"bigint64\"\n      case \"[object BigUint64Array]\":\n        return \"biguint64\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"bigint64\": [],\n  \"biguint64\": [],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n","/**\n * The `change` event, signalling that a different vertical coordinate value has been selected.\n * \n * @typedef {Object} Palette\n * @property {number} steps The number of colors in the palette.\n * @property {Array<number>} red Array of integers in [0,255] of length `steps`.\n * @property {Array<number>} green Array of integers in [0,255] of length `steps`.\n * @property {Array<number>} blue Array of integers in [0,255] of length `steps`.\n */\n\n/**\n * Returns a linearly interpolated palette out of CSS colors.\n * \n * @example\n * var grayscale = C.linearPalette(['#FFFFFF', '#000000'])\n * var rainbow = C.linearPalette(['#0000FF', '#00FFFF', '#00FF00', '#FFFF00', '#FF0000'])\n * \n * @param {Array<string>} colors An array of CSS colors.\n * @param {number} [steps=256] The number of palette colors to generate.\n * @return {Palette}\n */\nexport function linearPalette (colors, steps=256) {\n  if (steps === 1) {\n    // work-around, a gradient with 1 pixel becomes black otherwise\n    return directPalette([colors[0]])\n  }\n  // draw the gradient in a canvas\n  var canvas = document.createElement('canvas')\n  canvas.width = steps\n  canvas.height = 1\n  var ctx = canvas.getContext('2d')\n  var gradient = ctx.createLinearGradient(0, 0, steps - 1, 0)\n  var num = colors.length\n  for (var i = 0; i < num; i++) {\n    gradient.addColorStop(i / (num - 1), colors[i])\n  }\n  ctx.fillStyle = gradient\n  ctx.fillRect(0, 0, steps, 1)\n\n  // now read back values into arrays\n  var red = new Uint8Array(steps)\n  var green = new Uint8Array(steps)\n  var blue = new Uint8Array(steps)\n\n  var pix = ctx.getImageData(0, 0, steps, 1).data\n  for (let i = 0, j = 0; i < pix.length; i += 4, j++) {\n    red[j] = pix[i]\n    green[j] = pix[i + 1]\n    blue[j] = pix[i + 2]\n  }\n\n  return {\n    steps: red.length,\n    red: red,\n    green: green,\n    blue: blue\n  }\n}\n\n/**\n * Converts an array of CSS colors to a palette of the same size.\n * \n * @example\n * var bw = C.directPalette(['#000000', '#FFFFFF'])\n * // bw.steps == 2\n * \n * @param {Array<string>} colors An array of CSS colors.\n * @return {Palette}\n */\nexport function directPalette (colors) {\n  var canvas = document.createElement('canvas')\n  canvas.width = 1\n  canvas.height = 1\n  var ctx = canvas.getContext('2d')\n  \n  var steps = colors.length\n  \n  var red = new Uint8Array(steps)\n  var green = new Uint8Array(steps)\n  var blue = new Uint8Array(steps)\n  \n  for (var i=0; i < colors.length; i++) {\n    ctx.fillStyle = colors[i]\n    ctx.fillRect(0, 0, 1, 1)\n    var pix = ctx.getImageData(0, 0, 1, 1).data\n    red[i] = pix[0]\n    green[i] = pix[1]\n    blue[i] = pix[2]\n  }\n  \n  return {\n    steps: red.length,\n    red: red,\n    green: green,\n    blue: blue\n  }\n}\n\n/**\n * Converts any CSS color to an `{r,g,b}` object.\n * \n * @param {string} cssColor The CSS color\n * @return {Object} An object with r,g,b members with each a number in [0,255].\n * \n * @example\n * let rgb = cssToRGB('white') // {r: 255, g: 255, b: 255}\n */\nexport function cssToRGB (cssColor) {\n  let palette = directPalette([cssColor])\n  return {\n    r: palette.red[0],\n    g: palette.green[0],\n    b: palette.blue[0],\n  }\n}\n\n/**\n * Create a palette from a description object.\n * \n * Currently, two forms are supported:\n * \n * {\n *   \"colors\": [\"red\", \"blue\", ..]\n *   \"interpolation\": \"linear\",\n *   \"steps\": 200\n * }\n * \n * {\n *   \"colors\": [\"red\", \"blue\", ..]\n * }\n * \n * @return {Palette}\n */\nexport function paletteFromObject (paletteSpec) {\n  if (!paletteSpec) {\n    return\n  }\n  let colors = paletteSpec.colors\n  let palette\n  if (paletteSpec.interpolation === 'linear') {\n    palette = linearPalette(colors, paletteSpec.steps)\n  } else {\n    palette = directPalette(colors)\n  }\n  return palette\n}\n\n/**\n * Linearly scales a value to a given palette and value extent.\n * \n * @example\n * var value = 20\n * var grayscale = C.linearPalette(['#FFFFFF', '#000000'], 50) // 50 steps\n * var scaled = C.scale(value, grayscale, [0,100])\n * // scaled == 10\n * \n * @param {number} val The value to scale.\n * @param {object} palette The palette onto which the value is scaled.\n * @param {Array} extent The lower and upper bound within which the value is scaled,\n *   typically the value extent of a legend.\n * @return {number} The scaled value.\n * \n * @private\n */\nexport function scale (val, palette, extent) {\n  // scale val to [0,paletteSize-1] using the palette extent\n  // (IDL bytscl formula: http://www.exelisvis.com/docs/BYTSCL.html)\n  let scaled = Math.trunc((palette.steps - 1 + 0.9999) * (val - extent[0]) / (extent[1] - extent[0]))\n  return scaled\n}\n\n/**\n * Return enlarged extent if start and end are the same value,\n * otherwise return unchanged.\n * \n * @param {Array<number>} extent The extent [min,max] to enlarge.\n * @param {number} [amount] The ratio by which to extend on each side.\n * @return {Array<number>} The enlarged extent.\n * \n * @private\n */\nexport function enlargeExtentIfEqual (extent, amount=0.1) {\n  if (extent[0] === extent[1]) {\n    let buffer = extent[0]*amount\n    return [extent[0]-buffer, extent[1]+buffer]\n  } else {\n    return extent\n  }\n}\n\n/**\n * Manages palettes under common names.\n *  \n * @example\n * var palettes = new C.PaletteManager({defaultSteps: 10})\n * palettes.addLinear('grayscale', ['#FFFFFF', '#000000']) // 10 steps\n * palettes.addLinear('grayscalehd', ['#FFFFFF', '#000000'], {steps: 200}) // high-resolution palette\n * palettes.add('breweroranges3', ['#fee6ce', '#fdae6b', '#e6550d']) // palette of those 3 colors\n * palettes.add('mycustom', {red: [0,255], green: [0,0], blue: [10,20]}) // different syntax\n */\nexport class PaletteManager {\n  \n  /**\n   * @param {Integer} defaultSteps The default number of steps when adding palettes with addLinear().\n   */\n  constructor({defaultSteps=256} = {}) {\n    this._defaultSteps = defaultSteps\n    this._palettes = new Map()\n  }\n  \n  /**\n   * Store a supplied generic palette under the given name.\n   * \n   * @example\n   * var palettes = new C.PaletteManager()\n   * palettes.add('breweroranges3', ['#fee6ce', '#fdae6b', '#e6550d']) // palette of those 3 colors\n   * palettes.add('mycustom', {red: [0,255], green: [0,0], blue: [10,20]}) // different syntax\n   * \n   * @param {string} name The unique name of the palette.\n   * @param {Palette|Array<string>} palette A palette object or an array of CSS colors.\n   */\n  add (name, palette) {\n    if (Array.isArray(palette)) {\n      palette = directPalette(palette)\n    }\n    \n    if (![palette.red, palette.green, palette.blue].every(arr => arr.length === palette.red.length)) {\n      throw new Error('The red, green, blue arrays of the palette must be of equal lengths')\n    }\n    if (!(palette.red instanceof Uint8Array)) {\n      palette.red = _asUint8Array(palette.red)\n      palette.green = _asUint8Array(palette.green)\n      palette.blue = _asUint8Array(palette.blue)\n    }\n    palette.steps = palette.red.length // for convenience in clients\n    this._palettes.set(name, palette)\n  }\n  \n  /**\n   * Store a linear palette under the given name created with the given CSS color specifications.\n   * \n   * @example\n   * var palettes = new C.PaletteManager()\n   * palettes.addLinear('grayscale', ['#FFFFFF', '#000000']) // 10 steps\n   * palettes.addLinear('grayscalehd', ['#FFFFFF', '#000000'], {steps: 200})\n   * \n   * @param {String} name The unique name of the palette\n   * @param {Array<string>} colors An array of CSS color specifications\n   * @param {number} steps Use a different number of steps than the default of this manager.\n   */\n  addLinear (name, colors, {steps} = {}) {\n    this.add(name, linearPalette(colors, steps ? steps : this._defaultSteps))\n  }\n  \n  /**\n   * Return the palette stored under the given name, or throw an error if not found.\n   * The palette is an object with properties steps, red, green, and blue.\n   * Each of the color arrays is an Uint8Array of length steps.\n   * \n   * @param {string} name The unique name of the palette\n   * @returns {Palette}\n   */\n  get (name) {\n    var palette = this._palettes.get(name)\n    if (palette === undefined) {\n      throw new Error('Palette \"' + name + '\" not found')\n    }\n    return palette\n  }\n  \n  get [Symbol.iterator] () {\n    return this._palettes[Symbol.iterator]\n  }\n}\n\nfunction _asUint8Array (arr) {\n  var ta = new Uint8Array(arr.length)\n  for (var i=0; i < arr.length; i++) {\n    let val = arr[i]\n    if (val < 0 || val > 255) {\n      throw new Error('Array value must be within [0,255], but is: ' + val)\n    }\n    ta[i] = val\n  }\n  return ta\n}\n","import {linearPalette, directPalette, paletteFromObject, scale} from './palettes.js'\n\nconst DEFAULT_CONTINUOUS_PALETTE = () => linearPalette(['#deebf7', '#3182bd']) // blues\nconst DEFAULT_CATEGORICAL_PALETTE = n => {\n  if (n > 12) {\n    throw new Error('not enough built-in categorical colors, must supply custom colors')\n  }\n  return directPalette(['#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c',\n                        '#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928'].slice(0,n))\n}\n\n/**\n * The `paletteChange` event, signalling that the palette has changed.\n * \n * @typedef {L.Event} PaletteMixin#paletteChange\n */\n\n/**\n * The `paletteExtentChange` event, signalling that the palette extent has changed.\n * \n * @typedef {L.Event} PaletteMixin#paletteExtentChange\n */\n\n/**\n * A mixin that encapsulates the palette logic of a coverage layer,\n * supporting categorical and continuous coverage parameters.\n * \n * The following functions/properties are supplied:\n * \n * - initializePalette() - to be called once data has been loaded so that computePaletteExtent can be called\n * - get/set palette\n * - get/set paletteExtent\n * - setPaletteExtent(extent) - like set paletteExtent, but returns a Promise to know when calculations etc. are done\n * - getPaletteIndex(val) - returns the color index for the given value\n * \n * The base class must supply the following functions/properties:\n * \n * - options.palette (optional)\n * - options.paletteExtent (optional) - initial value that computePaletteExtent is called with\n * - parameter\n * - redraw()\n * - computePaletteExtent(extent) - returns a Promise with the computed extent; gets called when .paletteExtent is set to a string value\n * - canUsePalette() (optional) - if this method exists and returns false, then .palette returns undefined\n * \n * @param {class} base The base class.\n * @return {class} The base class with PaletteMixin.\n */\nexport function PaletteMixin (base) {\n  return class extends base {\n    \n    initializePalette () {\n      let options = this.options\n      let parameter = this.parameter\n      if (!parameter) {\n        return Promise.resolve()\n      }\n      let categories = parameter.observedProperty.categories\n      \n      if (categories) {\n        this._initCategoryIdxMap()\n      }\n      \n      if (this._palette) {\n        // do nothing, already set\n      } else if (options.palette) {\n        this._palette = options.palette\n      } else if (parameter.preferredPalette) {\n        this._palette = paletteFromObject(parameter.preferredPalette)\n      } else if (categories) {\n        if (categories.every(cat => cat.preferredColor)) {\n          this._palette = directPalette(categories.map(cat => cat.preferredColor))\n        } else {\n          this._palette = DEFAULT_CATEGORICAL_PALETTE(categories.length)\n        }\n      } else {\n        this._palette = DEFAULT_CONTINUOUS_PALETTE()\n      }\n      \n      if (categories && categories.length !== this._palette.steps) {\n        throw new Error('Categorical palettes must match the number of categories of the parameter')\n      }\n            \n      this._paletteExtent = this._paletteExtent || options.paletteExtent\n\n      if (options.hasOwnProperty('extendMax')) {\n        this._extendMax = options.extendMax\n      } else {\n        this._extendMax = false\n      }\n\n      if (options.hasOwnProperty('extendMin')) {\n        this._extendMin = options.extendMin\n      } else {\n        this._extendMin = false\n      }\n      \n      if (this.parameter.categoryEncoding) {\n        // categorical parameter, does not depend on palette extent\n        let valIdxMap = this._categoryIdxMap\n        let max = valIdxMap.length - 1\n        this.getPaletteIndex = val => {\n          if (val === null || val < 0 || val > max) return\n          let idx = valIdxMap[val]\n          if (idx === 255) return\n          return idx\n        }\n      }\n      \n      if (!this.canUsePalette || this.canUsePalette()) {\n        return this.setPaletteExtent(this._paletteExtent, true)\n          .then(() => this._updatePaletteIndexFn())\n      } else {\n        return Promise.resolve()\n      }\n    }\n    \n    _updatePaletteIndexFn () {\n      if (!this.parameter.categoryEncoding) {\n        // continuous parameter\n        let palette = this.palette\n        let extent = this.paletteExtent\n        this.getPaletteIndex = val => {\n          if (val === null) return\n          if(val > extent[1]) {\n            if(this._extendMax) {\n              return palette.steps - 1\n            } else {\n              return\n            }\n          }\n          if(val < extent[0]) {\n            if(this._extendMin) {\n              return 0\n            } else {\n              return\n            }\n          }\n          let idx = scale(val, palette, extent)\n          return idx\n        }\n      }\n    }\n    \n    get palette () {\n      if (this.parameter && (!this.canUsePalette || this.canUsePalette())) {\n        return this._palette\n      }\n    }\n    \n    set palette (p) {\n      this._palette = p\n      this._updatePaletteIndexFn()\n      this.redraw()\n      this.fire('paletteChange')\n    }\n    \n    set paletteExtent (extent) {\n      this.setPaletteExtent(extent)\n    }\n    \n    get paletteExtent () {\n      return this._paletteExtent\n    }\n    \n    setPaletteExtent (extent, skipRedraw) {\n      if (this.parameter.observedProperty.categories) {\n        return Promise.resolve()\n      }\n      \n      let oldExtent = this.paletteExtent\n      let hasChanged = newExtent => {\n        if (!Array.isArray(oldExtent)) return true\n        if (oldExtent[0] !== newExtent[0] || oldExtent[1] !== newExtent[1]) return true\n        return false\n      }\n      let res = Array.isArray(extent) ? Promise.resolve(extent) : this.computePaletteExtent(extent)\n      return res.then(newExtent => {\n        // ignore invalid extents (may come from using ParameterSync)\n        if (Array.isArray(newExtent) && isNaN(newExtent[0])) return\n        if (!hasChanged(newExtent)) return\n        this._paletteExtent = newExtent\n        this._updatePaletteIndexFn()\n        if (!skipRedraw) {\n          this.redraw()\n        }\n        this.fire('paletteExtentChange')\n      })\n    }\n            \n    /**\n     * Sets up a lookup table from categorical range value to palette index.\n     */\n    _initCategoryIdxMap () {\n      let param = this.parameter\n      if (!param.categoryEncoding) return\n      \n      // categorical parameter with integer encoding\n      // Note: The palette order is equal to the categories array order.\n      let max = -Infinity\n      let min = Infinity\n      let categories = param.observedProperty.categories\n      let encoding = param.categoryEncoding\n      for (let category of categories) {\n        if (encoding.has(category.id)) {\n          for (let val of encoding.get(category.id)) {\n            max = Math.max(max, val)\n            min = Math.min(min, val)\n          }\n        }\n      }\n      let valIdxMap\n      if (categories.length < 256) {\n        if (max > 10000 || min < 0) {\n          // TODO implement fallback to Map implementation\n          throw new Error('category values too high (>10000) or low (<0)')\n        }\n        valIdxMap = new Uint8Array(max+1)\n        for (let i=0; i <= max; i++) {\n          // the above length < 256 check ensures that no palette index is ever 255\n          valIdxMap[i] = 255\n        }\n        \n        for (let idx=0; idx < categories.length; idx++) {\n          let category = categories[idx]\n          if (encoding.has(category.id)) {\n            for (let val of param.categoryEncoding.get(category.id)) {\n              valIdxMap[val] = idx\n            }\n          }\n        }\n      } else {\n        throw new Error('Too many categories: ' + categories.length)\n      }\n      this._categoryIdxMap = valIdxMap\n    }\n  }\n}\n","import {loadProjection, getHorizontalCRSComponents} from 'covutils'\n\n/**\n * A mixin that encapsulates loading of a single coverage for use in layers.\n * \n * The base class must supply the following functions/properties:\n * \n * .coverage\n * .parameter (optional)\n * ._loadCoverageSubset() (optional)\n * \n * The following functions/properties are supplied:\n * \n * .domain (after calling load())\n * .range (after calling load(); only if .parameter is set and ._loadCoverageSubset is undefined)\n * \n * @param {class} base The base class.\n * @return {class} The base class with CoverageMixin.\n */\nexport function CoverageMixin (base) {\n  return class extends base {\n    /**\n     * Load all data without adding anything to the map.\n     * After loading is done, all functions and properties can be accessed (like getLatLng()).\n     */\n    load () {\n      this.fire('dataLoading') // for supporting loading spinners\n      \n      let promise = this.coverage.loadDomain().then(domain => {\n        this.domain = domain\n        \n        ;[this._projX, this._projY] = getHorizontalCRSComponents(domain)\n        return loadProjection(domain)\n      }).then(proj => {\n        this.projection = proj\n      })\n      if (this._loadCoverageSubset) {\n        promise = promise.then(() => this._loadCoverageSubset())\n      } else if (this.parameter) {\n        promise = promise.then(() => this.coverage.loadRange(this.parameter.key)).then(range => {\n          this.range = range\n        })\n      }\n      \n      promise = promise.then(() => {\n        this.fire('dataLoad')\n      }).catch(e => {\n        console.error(e)\n        this.fire('error', e)\n        this.fire('dataLoad')\n      })\n      return promise\n    }\n  }\n}","import L from 'leaflet'\r\nimport ndarray from 'ndarray'\r\nimport {indexOfNearest, isDomain, fromDomain, minMaxOfRange, getReferenceObject, isEllipsoidalCRS} from 'covutils'\r\n\r\nimport {cssToRGB, enlargeExtentIfEqual} from './palettes.js'\r\nimport {PaletteMixin} from './PaletteMixin.js'\r\nimport {CoverageMixin} from './CoverageMixin.js'\r\n  \r\n/**\r\n * Renderer for Coverages and Domains conforming to the `Grid` domain type of CovJSON.\r\n * For Domain objects, a dummy parameter and range data is created.\r\n * \r\n * @example\r\n * var cov = ... // get Coverage data\r\n * var layer = new C.Grid(cov, {\r\n *   parameter: 'salinity',\r\n *   time: new Date('2015-01-01T12:00:00Z'),\r\n *   vertical: 50,\r\n *   palette: C.linearPalette(['#FFFFFF', '#000000']),\r\n *   paletteExtent: 'subset'\r\n * })\r\n * \r\n * @see https://covjson.org/domain-types/#grid\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#dataLoading} Data loading has started\r\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {DataLayer#axisChange} Axis coordinate has changed (e.axis === 'time'|'vertical')\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * \r\n * @extends {L.GridLayer}\r\n * @extends {CoverageMixin}\r\n * @extends {PaletteMixin}\r\n * @implements {DataLayer}\r\n */\r\nexport class Grid extends PaletteMixin(CoverageMixin(L.GridLayer)) {\r\n  \r\n  /**\r\n   * The key of the parameter to display must be given in the 'parameter' options property,\r\n   * except when the coverage data object is a Domain object.\r\n   * \r\n   * Optional time and vertical axis target values can be defined with the 'time' and\r\n   * 'vertical' options properties. The closest values on the respective axes are chosen.\r\n   * \r\n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\r\n   * @param {Date} [options.time] The initial time slice to display, defaults to the first one.\r\n   * @param {number} [options.vertical] The initial vertical slice to display, defaults to the first one.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='subset'] The initial palette extent, one of \r\n   *  `subset` (computed from data of current time/vertical slice),\r\n   *  `fov` (computed from data in map field of view; not implemented yet),\r\n   *  or specific: [-10,10].\r\n   * @param {boolean} [options.valueToColor] If present, the value is converted to a color using the given function,\r\n   *  and palette settings are ignored.  The returned color should be of the form `{r: 0, g: 0, b: 0, a: 1}`.\r\n   */\r\n  constructor (cov, options={}) {\r\n    super()\r\n\r\n    if (options.valueToColor) {\r\n      this.valueToColor = options.valueToColor\r\n    }\r\n    \r\n    if (isDomain(cov)) {\r\n      cov = fromDomain(cov)\r\n      options.parameter = cov.parameters.keys().next().value\r\n      delete options.keys\r\n    }\r\n    \r\n    if (!options.paletteExtent) {\r\n      options.paletteExtent = 'subset'\r\n    }\r\n    \r\n    L.Util.setOptions(this, options)\r\n    \r\n    this._cov = cov\r\n    this._param = cov.parameters.get(options.keys ? options.keys[0] :options.parameter)\r\n    this._axesSubset = { // x and y are not subsetted\r\n        t: {coordPref: options.time ? options.time.toISOString() : undefined},\r\n        z: {coordPref: options.vertical}\r\n    }\r\n\r\n    /**\r\n     * The vertical reference system object, used by {@link VerticalAxis}.\r\n     * @type {Object}\r\n     */\r\n    this.crsVerticalAxis = undefined\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    // \"loading\" and \"load\" events are provided by the underlying GridLayer class\r\n    this._map = map\r\n\r\n    this.load()\r\n      .then(() => this.initializePalette())\r\n      .then(() => {\r\n        // used in controls/VerticalAxis.js\r\n        let vertRef = getReferenceObject(this.domain, 'z')\r\n        if (vertRef && vertRef.coordinates.length === 1) {\r\n          let vertRefSys = vertRef.system\r\n          if (vertRefSys.cs && (vertRefSys.cs.csAxes || vertRefSys.cs.axes)) {\r\n            this.crsVerticalAxis = vertRefSys.cs.csAxes ? vertRefSys.cs.csAxes[0] : vertRefSys.cs.axes[0]\r\n          }\r\n        } else {\r\n          // TODO handle vertical axis part of 3D CRS\r\n        }\r\n      })\r\n      .then(() => {\r\n        this._errored = false\r\n        super.onAdd(map)\r\n        this.fire('afterAdd')\r\n      })\r\n      .catch(e => {\r\n        this._errored = true\r\n        console.log(e)\r\n        super.onAdd(map)\r\n      })\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onRemove (map) {\r\n    delete this._map\r\n    // TODO delete references to domain/range, caching logic should happen elsewhere\r\n    super.onRemove(map)\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographic bounds of the coverage.\r\n   * \r\n   * For projected coverages this is an approximation based on unprojecting the four bounding box corners\r\n   * and fitting all four points into a geographic bounding box.\r\n   * \r\n   * @returns {L.LatLngBounds}\r\n   */\r\n  getBounds () {\r\n    let bbox\r\n    if (this._cov.bbox) {\r\n      bbox = this._cov.bbox\r\n    } else {\r\n      bbox = this._getDomainBbox()\r\n      let proj = this.projection\r\n      // for projected CRSs this approximates the geographic bbox by unprojecting the projected bbox corners\r\n      // for geographic CRSs the result will be identical \r\n      let p1 = proj.unproject({x: bbox[0], y: bbox[1]})\r\n      let p2 = proj.unproject({x: bbox[0], y: bbox[3]})\r\n      let p3 = proj.unproject({x: bbox[2], y: bbox[1]})\r\n      let p4 = proj.unproject({x: bbox[2], y: bbox[3]})\r\n      return L.latLngBounds([p1, p2, p3, p4])\r\n    }\r\n    let southWest = L.latLng(bbox[1], bbox[0])\r\n    let northEast = L.latLng(bbox[3], bbox[2])\r\n    let bounds = L.latLngBounds(southWest, northEast)\r\n    return bounds\r\n  }\r\n  \r\n  /**\r\n   * Subsets the temporal and vertical axes based on the _axesSubset.*.coordPref property,\r\n   * which is regarded as a preference and does not have to exactly match a coordinate.\r\n   * \r\n   * The return value is a promise that succeeds with an empty result and\r\n   * sets this._subsetCov to the subsetted coverage.\r\n   * The subsetting always fixes a single time and vertical slice, choosing the first\r\n   * axis value if no preference was given.\r\n   * \r\n   * After calling this method, _axesSubset.*.idx and _axesSubset.*.coord have\r\n   * values from the actual axes.\r\n   */\r\n  _loadCoverageSubset () {        \r\n    let spec = {}\r\n    for (let axis of Object.keys(this._axesSubset)) {\r\n      let ax = this._axesSubset[axis]\r\n      if (!this.domain.axes.has(axis)) {\r\n        continue\r\n      }\r\n      if (ax.coordPref == undefined) { // == also handles null\r\n        spec[axis] = {target: this.domain.axes.get(axis).values[0]}\r\n      } else {\r\n        spec[axis] = {target: ax.coordPref}\r\n      }\r\n    }\r\n    \r\n    this.fire('dataLoading') // for supporting loading spinners\r\n    return this._cov.subsetByValue(spec)\r\n      .then(subsetCov => {\r\n        this._subsetCov = subsetCov\r\n        //  the goal is to avoid reloading data when approximating palette extent via subsetting\r\n        //  but: memory has to be freed when the layer is removed from the map\r\n        //      -> therefore cacheRanges is set on subsetCov whose reference is removed on onRemove\r\n        subsetCov.cacheRanges = true\r\n        return Promise.all([subsetCov.loadDomain(), subsetCov.loadRange(this._param.key)])\r\n      })\r\n      .then(([subsetDomain, subsetRange]) => {\r\n        this._subsetDomain = subsetDomain\r\n        this._subsetRange = subsetRange\r\n        this.fire('dataLoad')\r\n      })\r\n      .catch(e => {\r\n        this.fire('dataLoad')\r\n        throw e\r\n      })\r\n  }\r\n  \r\n  /**\r\n   * The coverage object associated to this layer.\r\n   * \r\n   * @type {Coverage}\r\n   */\r\n  get coverage () {\r\n    return this._cov\r\n  }\r\n  \r\n  /**\r\n   * The parameter that is visualized.\r\n   * \r\n   * @type {Parameter}\r\n   */\r\n  get parameter () {\r\n    return this._param\r\n  }\r\n  \r\n  /**\r\n   * Sets the currently active time to the one closest to the given Date object.\r\n   * Throws an exception if there is no time axis.\r\n   * \r\n   * @type {Date}\r\n   */\r\n  set time (val) {\r\n    if (!this.domain.axes.has('t')) {\r\n      throw new Error('No time axis found')\r\n    }\r\n    let old = this.time\r\n    this._axesSubset.t.coordPref = val.toISOString()\r\n    this._loadCoverageSubset().then(() => {\r\n      if (old === this.time) return\r\n      this.redraw()\r\n      this.fire('axisChange', {axis: 'time'})\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * The currently active time on the temporal axis as Date object, \r\n   * or undefined if the grid has no time axis.\r\n   * \r\n   * @type {Date|undefined}\r\n   */\r\n  get time () {\r\n    if (this.domain.axes.has('t')) {\r\n      let time = this._subsetDomain.axes.get('t').values[0]\r\n      return new Date(time)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * The time slices that make up the coverage, or undefined if the grid has no time axis .\r\n   * \r\n   * @type {Array<Date>|undefined}\r\n   */\r\n  get timeSlices () {\r\n    if (this.domain.axes.has('t')) {\r\n      return this.domain.axes.get('t').values.map(t => new Date(t))\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Sets the currently active vertical coordinate to the one closest to the given value.\r\n   * \r\n   * @type {number}\r\n   */\r\n  set vertical (val) {\r\n    if (!this.domain.axes.has('z')) {\r\n      throw new Error('No vertical axis found')\r\n    }\r\n    let old = this.vertical\r\n    this._axesSubset.z.coordPref = val\r\n    this._loadCoverageSubset().then(() => {\r\n      if (old === this.vertical) return\r\n      this.redraw()\r\n      this.fire('axisChange', {axis: 'vertical'}) \r\n    })  \r\n  }\r\n  \r\n  /**\r\n   * The currently active vertical coordinate as a number, \r\n   * or undefined if the grid has no vertical axis.\r\n   * \r\n   * @type {number|undefined}\r\n   */\r\n  get vertical () {\r\n    if (this.domain.axes.has('z')) {\r\n      let val = this._subsetDomain.axes.get('z').values[0]\r\n      return val\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * The vertical slices that make up the coverage, or undefined if the grid has no vertical axis .\r\n   * \r\n   * @type {Array<number>|undefined}\r\n   */\r\n  get verticalSlices () {\r\n    if (this.domain.axes.has('z')) {\r\n      let vals = this.domain.axes.get('z').values\r\n      if (ArrayBuffer.isView(vals)) {\r\n        // convert to plain Array to allow easier use\r\n        vals = [...vals]\r\n      }\r\n      return vals\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  computePaletteExtent (extent) {\r\n    if (extent === 'subset') {\r\n      // scan the current subset for min/max values\r\n      \r\n      let xlen = this._subsetRange.shape.get(this._projX)\r\n      let ylen = this._subsetRange.shape.get(this._projY)\r\n\r\n      // check if subsetted size is manageable\r\n      if (xlen * ylen < 1000*1000) {\r\n        extent = minMaxOfRange(this._subsetRange)\r\n        extent = enlargeExtentIfEqual(extent)\r\n        return Promise.resolve(extent)\r\n      } else {\r\n        // subset x and y to get a fast estimate of the palette extent\r\n        // since it is an estimate, the lower and upper bound needs a small buffer\r\n        // (to prevent out-of-bounds colours)\r\n        let xconstraint = {start: 0, stop: xlen, step: Math.max(Math.round(xlen/1000), 1)}\r\n        let yconstraint = {start: 0, stop: ylen, step: Math.max(Math.round(ylen/1000), 1)}\r\n        \r\n        return this._subsetCov.subsetByIndex({[this._projX]: xconstraint, [this._projY]: yconstraint})        \r\n          .then(subsetCov => {\r\n            return subsetCov.loadRange(this._param.key).then(subsetRange => {\r\n               let [min,max] = minMaxOfRange(subsetRange)\r\n               let buffer = (max-min)*0.1 // 10% buffer on each side\r\n               extent = [min-buffer, max+buffer]\r\n               return extent\r\n            })\r\n          })\r\n      }\r\n    } else if (extent === 'fov') {\r\n      // scan the values that are currently in field of view on the map for min/max\r\n      // this implies using the current subset\r\n      let bounds = this._map.getBounds()\r\n\r\n      // TODO implement\r\n      throw new Error('NOT IMPLEMENTED YET')      \r\n    } else {\r\n      throw new Error('Unknown extent specification: ' + extent)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value at a given geographic position.\r\n   * If out of bounds, then undefined is returned, otherwise a number or null (for no data).\r\n   * \r\n   * @param {L.LatLng} latlng\r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValueAt (latlng) {\r\n    let X = this.domain.axes.get(this._projX).values\r\n    let Y = this.domain.axes.get(this._projY).values\r\n    let bbox = this._getDomainBbox()\r\n\r\n    let {lat, lng} = latlng\r\n    let {x,y} = this.projection.project({lat, lon: lng})\r\n\r\n    // we first check whether the tile pixel is outside the domain bounding box\r\n    // in that case we skip it as we do not want to extrapolate\r\n    if (x < bbox[0] || x > bbox[2] || y < bbox[1] || y > bbox[3]) {\r\n      return\r\n    }\r\n    \r\n    let iy = indexOfNearest(Y, y)\r\n    let ix = indexOfNearest(X, x)\r\n\r\n    return this._subsetRange.get({[this._projY]: iy, [this._projX]: ix})\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * @override\r\n   * \r\n   * @param {L.Point} coords The tile coordinates (with z being zoom level).\r\n   * @return {HTMLCanvasElement}\r\n   */\r\n  createTile (coords) {\r\n    let tile = L.DomUtil.create('canvas', 'leaflet-tile')\r\n\r\n    // setup tile width and height according to the options\r\n    var size = this.getTileSize()\r\n    tile.width = size.x\r\n    tile.height = size.y\r\n\r\n    this.drawTile(tile, coords)\r\n\r\n    return tile\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * \r\n   * @param {HTMLCanvasElement} The canvas to draw on.\r\n   * @param {L.Point} coords The tile coordinates (with z being zoom level).\r\n   */\r\n  drawTile (canvas, coords) {\r\n    if (this._errored) return\r\n    \r\n    let ctx = canvas.getContext('2d')\r\n    let tileSize = this.getTileSize()\r\n    \r\n    let imgData = ctx.getImageData(0, 0, tileSize.x, tileSize.y)\r\n    // Uint8ClampedArray, 1-dimensional, in order R,G,B,A,R,G,B,A,... row-major\r\n    let rgba = ndarray(imgData.data, [tileSize.y, tileSize.x, 4])\r\n\r\n    let setPixel\r\n    if(this.valueToColor) {\r\n      let valueToColor = this.valueToColor\r\n      setPixel = (tileY, tileX, val) => {\r\n        let color = valueToColor(val)\r\n        if (color !== undefined && color !== null) {\r\n          rgba.set(tileY, tileX, 0, color.r)\r\n          rgba.set(tileY, tileX, 1, color.g)\r\n          rgba.set(tileY, tileX, 2, color.b)\r\n          rgba.set(tileY, tileX, 3, color.hasOwnProperty('a') ? color.a : 255)\r\n        }\r\n      }\r\n    } else {\r\n      let {red, green, blue} = this.palette\r\n          \r\n      let getPaletteIndex = this.getPaletteIndex\r\n      setPixel = (tileY, tileX, val) => {\r\n        let idx = getPaletteIndex(val)\r\n        if (idx !== undefined) {\r\n          rgba.set(tileY, tileX, 0, red[idx])\r\n          rgba.set(tileY, tileX, 1, green[idx])\r\n          rgba.set(tileY, tileX, 2, blue[idx])\r\n          rgba.set(tileY, tileX, 3, 255)\r\n        }\r\n      }\r\n    }\r\n    \r\n    \r\n    let vals = this._subsetRange.get\r\n    \r\n    if (this._isDomainUsingEllipsoidalCRS()) {\r\n      if (this._isRectilinearGeodeticMap()) {\r\n        // here we can apply heavy optimizations as the map CRS matches the domain CRS \r\n        this._drawGeodeticCRSWithRectilinearMapProjection(setPixel, coords, vals)\r\n      } else {\r\n        // this is for any random map projection\r\n        // here we have to unproject each map pixel individually and find the matching domain index coordinates\r\n        this._drawGeodeticCRSWithAnyMapProjection(setPixel, coords, vals)\r\n      }\r\n    } else {\r\n      // here we have to unproject each map pixel individually, \r\n      // project it into domain projection coordinates, and find the domain index coordinates\r\n      if (this._isRectilinearGeodeticMap()) {\r\n        this._drawProjectedCRSWithRectilinearMapProjection(setPixel, coords, vals)\r\n      } else {\r\n        this._drawProjectedCRSWithAnyMapProjection(setPixel, coords, vals)\r\n      }\r\n    }\r\n    \r\n    ctx.putImageData(imgData, 0, 0)    \r\n  }\r\n  \r\n  /**\r\n   * Derives the bounding box of the x,y CRS axes in domain CRS coordinates.\r\n   * \r\n   * @return {Array} [xmin,ymin,xmax,ymax]\r\n   */\r\n  _getDomainBbox () {\r\n    let extent = (x, xBounds) => {\r\n      let xend = x.length - 1\r\n      let xmin, xmax\r\n      if (xBounds) {\r\n        [xmin,xmax] = [xBounds.get(0)[0], xBounds.get(xend)[1]]\r\n      } else {\r\n        [xmin,xmax] = [x[0], x[xend]]\r\n      }\r\n      let xDescending = xmin > xmax\r\n      if (xDescending) {\r\n        [xmin,xmax] = [xmax,xmin]\r\n      }\r\n      if (!xBounds && x.length > 1) {\r\n        if (xDescending) {\r\n          xmin -= (x[xend - 1] - x[xend]) / 2\r\n          xmax += (x[0] - x[1]) / 2\r\n        } else {\r\n          xmin -= (x[1] - x[0]) / 2\r\n          xmax += (x[xend] - x[xend - 1]) / 2 \r\n        }\r\n      }\r\n      return [xmin, xmax]\r\n    }\r\n    \r\n    let xAxis = this.domain.axes.get(this._projX)\r\n    let yAxis = this.domain.axes.get(this._projY)\r\n    let [xmin, xmax] = extent(xAxis.values, xAxis.bounds)\r\n    let [ymin, ymax] = extent(yAxis.values, yAxis.bounds)\r\n\r\n    return [xmin,ymin,xmax,ymax]\r\n  }\r\n  \r\n  /**\r\n   * Draws a geodetic rectilinear domain grid on a map with arbitrary projection.\r\n   * \r\n   * @param {Function} setPixel A function with parameters (y,x,val) which \r\n   *                            sets the color of a pixel on a tile.\r\n   * @param {L.Point} coords The tile coordinates.\r\n   * @param {function(idx: Object): number|null} vals Range value function.\r\n   */\r\n  _drawGeodeticCRSWithAnyMapProjection (setPixel, coords, vals) {\r\n    // usable for any map projection, but computationally more intensive\r\n    // there are two hotspots in the loops: map.unproject and indexOfNearest\r\n    \r\n    // Note that this function is slightly more specialized and optimized than _drawProjectedCRSWithAnyMapProjection().\r\n    // It targets the case when the domain is lat/lon, whereas _drawProjectedCRSWithAnyMapProjection() works\r\n    // with any projected CRS in the grid domain.\r\n\r\n    let tileSize = this.getTileSize()\r\n    let startX = coords.x * tileSize.x\r\n    let startY = coords.y * tileSize.y\r\n    let zoom = coords.z\r\n\r\n    let map = this._map\r\n    let x = this.domain.axes.get('x').values\r\n    let y = this.domain.axes.get('y').values\r\n    let bbox = this._getDomainBbox()\r\n    \r\n    // a bit hacky\r\n    if (this._projX === 'y') {\r\n      bbox = [bbox[1], bbox[0], bbox[3], bbox[2]]\r\n    }\r\n    \r\n    let lonRange = [bbox[0], bbox[0] + 360]\r\n\r\n    \r\n    \r\n    for (let tileX = 0; tileX < tileSize.x; tileX++) {\r\n      for (let tileY = 0; tileY < tileSize.y; tileY++) {\r\n        let {lat,lng} = map.unproject(L.point(startX + tileX, startY + tileY), zoom)\r\n\r\n        // we first check whether the tile pixel is outside the domain bounding box\r\n        // in that case we skip it as we do not want to extrapolate\r\n        if (lat < bbox[1] || lat > bbox[3]) {\r\n          continue\r\n        }\r\n\r\n        lng = wrapLongitude(lng, lonRange)\r\n        if (lng < bbox[0] || lng > bbox[2]) {\r\n          continue\r\n        }\r\n\r\n        // now we find the closest grid cell using simple binary search\r\n        // for finding the closest latitude/longitude we use a simple binary search\r\n        // (as there is no discontinuity)\r\n        let iLat = indexOfNearest(y, lat)\r\n        let iLon = indexOfNearest(x, lng)\r\n\r\n        setPixel(tileY, tileX, vals({y: iLat, x: iLon}))\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Draws a domain with projected CRS on a map with arbitrary projection.\r\n   * \r\n   * @param {Function} setPixel A function with parameters (y,x,val) which \r\n   *                            sets the color of a pixel on a tile.\r\n   * @param {L.Point} coords The tile coordinates.\r\n   * @param {function(idx: Object): number|null} vals Range value function.\r\n   */\r\n  _drawProjectedCRSWithAnyMapProjection (setPixel, coords, vals) {\r\n    let map = this._map\r\n    let X = this.domain.axes.get(this._projX).values\r\n    let Y = this.domain.axes.get(this._projY).values\r\n    let bbox = this._getDomainBbox()\r\n    \r\n    let proj = this.projection\r\n\r\n    let tileSize = this.getTileSize()\r\n    let startX = coords.x * tileSize.x\r\n    let startY = coords.y * tileSize.y\r\n    let zoom = coords.z\r\n    \r\n    for (let tileX = 0; tileX < tileSize.x; tileX++) {\r\n      for (let tileY = 0; tileY < tileSize.y; tileY++) {\r\n        let {lat,lng} = map.unproject(L.point(startX + tileX, startY + tileY), zoom)\r\n        let {x,y} = proj.project({lat, lon: lng})\r\n\r\n        // we first check whether the tile pixel is outside the domain bounding box\r\n        // in that case we skip it as we do not want to extrapolate\r\n        if (x < bbox[0] || x > bbox[2] || y < bbox[1] || y > bbox[3]) {\r\n          continue\r\n        }\r\n\r\n        // now we find the closest grid cell using simple binary search\r\n        let iy = indexOfNearest(Y, y)\r\n        let ix = indexOfNearest(X, x)\r\n\r\n        setPixel(tileY, tileX, vals({y: iy, x: ix}))\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Draws a domain with projected CRS on a map with rectilinear lon/lat projection.\r\n   * \r\n   * @param {Function} setPixel A function with parameters (y,x,val) which \r\n   *                            sets the color of a pixel on a tile.\r\n   * @param {L.Point} coords The tile coordinates.\r\n   * @param {function(idx: Object): number|null} vals Range value function.\r\n   */\r\n  _drawProjectedCRSWithRectilinearMapProjection (setPixel, coords, vals) {\r\n    let map = this._map\r\n    let X = this.domain.axes.get(this._projX).values\r\n    let Y = this.domain.axes.get(this._projY).values\r\n    let bbox = this._getDomainBbox()\r\n    \r\n    let proj = this.projection\r\n\r\n    let tileSize = this.getTileSize()\r\n    let startX = coords.x * tileSize.x\r\n    let startY = coords.y * tileSize.y\r\n    let zoom = coords.z\r\n    \r\n    // since the map projection is a rectilinear lat/lon grid,\r\n    // we only have to unproject the the first row and column to get the lat/lon coordinates of all tile pixels\r\n    let lons = new Float64Array(tileSize.x)\r\n    for (let tileX = 0; tileX < tileSize.x; tileX++) {\r\n      let {lng} = map.unproject(L.point(startX + tileX, startY), zoom)\r\n      lons[tileX] = lng\r\n    }\r\n    let lats = new Float64Array(tileSize.y)\r\n    for (let tileY = 0; tileY < tileSize.y; tileY++) {\r\n      let {lat} = map.unproject(L.point(startX, startY + tileY), zoom)\r\n      lats[tileY] = lat\r\n    }    \r\n    \r\n    for (let tileX = 0; tileX < tileSize.x; tileX++) {\r\n      for (let tileY = 0; tileY < tileSize.y; tileY++) {\r\n        let lat = lats[tileY]\r\n        let lon = lons[tileX]\r\n        let {x,y} = proj.project({lat, lon})\r\n\r\n        // we first check whether the tile pixel is outside the domain bounding box\r\n        // in that case we skip it as we do not want to extrapolate\r\n        if (x < bbox[0] || x > bbox[2] || y < bbox[1] || y > bbox[3]) {\r\n          continue\r\n        }\r\n\r\n        // now we find the closest grid cell using simple binary search\r\n        let iy = indexOfNearest(Y, y)\r\n        let ix = indexOfNearest(X, x)\r\n\r\n        setPixel(tileY, tileX, vals({y: iy, x: ix}))\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Draws a geodetic rectilinear domain grid on a map whose grid is, or can be directly\r\n   * mapped to, a geodetic rectilinear grid.\r\n   * \r\n   * @param {Function} setPixel A function with parameters (y,x,val) which \r\n   *                            sets the color of a pixel on a tile.\r\n   * @param {L.Point} coords The tile coordinates.\r\n   * @param {function(idx: Object): number|null} vals Range value function.\r\n   */\r\n  _drawGeodeticCRSWithRectilinearMapProjection (setPixel, coords, vals) {\r\n    // optimized version for map projections that are equal to a rectilinear geodetic grid\r\n    // this can be used when lat and lon can be computed independently for a given pixel\r\n\r\n    let map = this._map\r\n    let x = this.domain.axes.get('x').values\r\n    let y = this.domain.axes.get('y').values\r\n    let bbox = this._getDomainBbox()\r\n    \r\n    // a bit hacky\r\n    if (this._projX === 'y') {\r\n      bbox = [bbox[1], bbox[0], bbox[3], bbox[2]]\r\n    }\r\n      \r\n    let lonRange = [bbox[0], bbox[0] + 360]\r\n\r\n    let tileSize = this.getTileSize()\r\n    let startX = coords.x * tileSize.x\r\n    let startY = coords.y * tileSize.y\r\n    let zoom = coords.z\r\n    \r\n    var latCache = new Float64Array(tileSize.y)\r\n    var iLatCache = new Uint32Array(tileSize.y)\r\n    for (let tileY = 0; tileY < tileSize.y; tileY++) {\r\n      var lat = map.unproject(L.point(startX, startY + tileY), zoom).lat\r\n      latCache[tileY] = lat\r\n      // find the index of the closest latitude in the grid using simple binary search\r\n      iLatCache[tileY] = indexOfNearest(y, lat)\r\n    }\r\n\r\n    for (let tileX = 0; tileX < tileSize.x; tileX++) {\r\n      let lon = map.unproject(L.point(startX + tileX, startY), zoom).lng\r\n      lon = wrapLongitude(lon, lonRange)\r\n      if (lon < bbox[0] || lon > bbox[2]) {\r\n        continue\r\n      }\r\n\r\n      // find the index of the closest longitude in the grid using simple binary search\r\n      // (as there is no discontinuity)\r\n      let iLon = indexOfNearest(x, lon)\r\n\r\n      for (let tileY = 0; tileY < tileSize.y; tileY++) {\r\n        // get geographic coordinates of tile pixel\r\n        let lat = latCache[tileY]\r\n\r\n        // we first check whether the tile pixel is outside the domain bounding box\r\n        // in that case we skip it as we do not want to extrapolate\r\n        if (lat < bbox[1] || lat > bbox[3]) {\r\n          continue\r\n        }\r\n\r\n        let iLat = iLatCache[tileY]\r\n\r\n        setPixel(tileY, tileX, vals({y: iLat, x: iLon}))\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Return true if the map projection grid can be mapped to a rectilinear\r\n   * geodetic grid. For that, it must satisfy:\r\n   * for all x, there is a longitude lon, for all y, unproject(x,y).lon = lon\r\n   * for all y, there is a latitude lat, for all x, unproject(x,y).lat = lat\r\n   * \r\n   * Returns false if this is not the case or unknown.\r\n   */\r\n  _isRectilinearGeodeticMap () {\r\n    let crs = this._map.options.crs\r\n    // these are the ones included in Leaflet\r\n    let recti = [L.CRS.EPSG3857, L.CRS.EPSG4326, L.CRS.EPSG3395, L.CRS.Simple]\r\n    let isRecti = recti.indexOf(crs) !== -1\r\n    // TODO for unknown ones, how do we test that?\r\n    return isRecti\r\n  }\r\n  \r\n  /**\r\n   * Return whether the coverage domain is using a geodetic CRS with WGS84 datum.\r\n   */\r\n  _isDomainUsingEllipsoidalCRS () {\r\n    return this.domain.referencing.some(ref => isEllipsoidalCRS(ref.system))\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  redraw () {\r\n    // we check getContainer() to prevent errors when trying to redraw when the layer has not\r\n    // fully initialized yet\r\n    if (this.getContainer()) {\r\n      L.GridLayer.prototype.redraw.call(this)\r\n    }\r\n  }\r\n}\r\n\r\nfunction wrapLongitude (lon, range) {\r\n  return L.Util.wrapNum(lon, range, true)\r\n}\r\n","import L from 'leaflet'\nimport {cssToRGB} from './palettes.js'\n\n/**\n * A mixin that encapsulates the creation, update, and removal\n * of a CircleMarker.\n * \n * It provides the public methods `bindPopup`, `openPopup`, `closePopup`, and `redraw`.\n * \n * See {@link Point} and {@link VerticalProfile} for usage.\n * \n * @param {PointDataLayer} base The base class implementing the {@link PointDataLayer} interface.\n * @return {class} The base class with CircleMarkerMixin.\n */\nexport function CircleMarkerMixin (base) {\n  return class extends base {\n   \n    _addMarker () {\n      let val = this.getValue()\n      if (val === null && !this.showNoData) {\n        return\n      }\n      let color = this._getColor(val)\n      let {r,g,b} = typeof color === 'string' ? cssToRGB(color) : color    \n      let latlng = this.getLatLng()\n      \n      let strokeBrightness = 0.7\n      \n      this._marker = L.circleMarker(latlng, {\n        fillColor: 'rgb(' + r + ',' + g + ',' + b + ')',\n        fillOpacity: 1,\n        radius: 5,\n        stroke: true,\n        opacity: 1,\n        weight: 1,\n        color: 'rgb(' + Math.round(r*strokeBrightness) + ',' + \n                        Math.round(g*strokeBrightness) + ',' + \n                        Math.round(b*strokeBrightness) + ')'\n      }).on('click', e => {\n        e.coverage = this.coverage\n        this.fire('click', e)\n      }).addTo(this._map)\n      \n      if (this._popup) {\n        this._marker.bindPopup(...this._popup)\n      }\n    }\n    \n    _removeMarker () {\n      if (this._marker) {\n        this._map.removeLayer(this._marker)\n        delete this._marker\n      }\n    }\n    \n    __updateMarker () {\n      let color = this._getColor(val)\n      let {r,g,b} = typeof color === 'string' ? cssToRGB(color) : color\n      this._marker.options.color = 'rgb(' + r + ',' + g + ',' + b + ')'\n    }\n    \n    bindPopup (...args) {\n      this._popup = args\n      if (this._marker) {\n        this._marker.bindPopup(...args)\n      }\n    }\n    \n    openPopup () {\n      this._marker.openPopup()\n      return this\n    }\n    \n    closePopup () {\n      this._marker.closePopup()\n      return this\n    }\n    \n    redraw () {\n      if (this._marker) {\n        this.__updateMarker()\n        this._marker.redraw() \n      }\n    }\n  }\n}\n","import L from 'leaflet'\nimport {enlargeExtentIfEqual} from './palettes.js'\n\nimport {CoverageMixin} from './CoverageMixin.js'\nimport {CircleMarkerMixin} from './CircleMarkerMixin.js'\nimport {PaletteMixin} from './PaletteMixin.js'\nimport {EventMixin} from '../util/EventMixin.js'\n\nimport {isDomain, fromDomain} from 'covutils'\n\n/** @ignore */\nexport const DEFAULT_COLOR = 'black'\n\n/**\n * The `click` event, signalling that the point has been clicked.\n * \n * @typedef {L.MouseEvent} Point#click\n * @property {Coverage} coverage\n * @property {L.LatLng} latlng The geographical point where the click event occured.\n */\n\n/**\n * Renderer for Coverages and Domains conforming to CovJSON domain type `Point`.\n * \n * This will simply display a dot on the map and fire a click event when a user clicks on it.\n * The dot either has a defined standard color, or it uses a palette if a parameter is chosen.\n * \n * @example\n * var cov = ... // get Coverage data\n * var layer = new C.Point(cov, {\n *   parameter: 'salinity',\n *   defaultColor: 'black',\n *   palette: C.linearPalette(['#FFFFFF', '#000000'])\n * })\n * \n * @see https://covjson.org/domain-types/#point\n * \n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\n * @emits {DataLayer#dataLoading} Data loading has started\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\n * @emits {DataLayer#error} Error when loading data\n * @emits {PaletteMixin#paletteChange} Palette has changed\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\n * @emits {Point#click} when the point was clicked\n * \n * @extends {L.Layer}\n * @extends {CoverageMixin}\n * @extends {CircleMarkerMixin}\n * @extends {PaletteMixin}\n * @implements {DataLayer}\n * @implements {PointDataLayer}\n */\nexport class Point extends PaletteMixin(CircleMarkerMixin(CoverageMixin(L.Layer))) {\n  \n  /**\n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\n   * @param {Object} [options] The options object.\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full' or specific: [-10,10].\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\n   * @param {boolean} [options.showNoData=false] Whether to draw the point if there is no data.\n   */\n  constructor (cov, options) {\n    super()\n    \n    if (isDomain(cov)) {\n      cov = fromDomain(cov)\n      delete options.keys\n      options.parameter = cov.parameters.keys().next().value\n    }\n    \n    if (!options.paletteExtent) {\n      options.paletteExtent = 'full'\n    }\n    \n    L.Util.setOptions(this, options)\n\n    this._cov = cov\n    let paramKey = options.keys ? options.keys[0] : options.parameter\n    this._param = paramKey ? cov.parameters.get(paramKey) : null\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\n\n    /** @ignore */\n    this.showNoData = options.showNoData // if true, draw with default color\n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  onAdd (map) {\n    this._map = map\n\n    this.load()\n      .then(() => this.initializePalette())\n      .then(() => {\n        this._addMarker()\n        this.fire('afterAdd')\n      })\n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  onRemove () {\n    this._removeMarker()\n  }\n  \n  /**\n   * Returns the geographic bounds of the coverage, which is a degenerate box collapsed to a point.\n   * \n   * @return {L.LatLngBounds}\n   */\n  getBounds () {\n    return L.latLngBounds([this.getLatLng()])\n  }\n  \n  /**\n   * Returns the geographical position of the coverage.\n   * \n   * @return {L.LatLng}\n   */\n  getLatLng () {\n    let x = this.domain.axes.get(this._projX).values[0]\n    let y = this.domain.axes.get(this._projY).values[0]\n    let latlng = this.projection.unproject({x,y})\n    return L.latLng(latlng)\n  }\n  \n  /**\n   * The coverage object associated to this layer.\n   * \n   * @type {Coverage}\n   */\n  get coverage () {\n    return this._cov\n  }\n    \n  /**\n   * The parameter that is visualized.\n   * \n   * @type {Parameter}\n   */\n  get parameter () {\n    return this._param\n  }\n      \n  /**\n   * See {@link PaletteMixin}.\n   * \n   * @ignore\n   */\n  computePaletteExtent (extent) {\n    if (extent === 'full') {\n      if (!this.parameter) {\n        throw new Error('palette extent cannot be computed when no parameter has been chosen')\n      }\n  \n      let val = this.getValue()\n      extent = enlargeExtentIfEqual([val, val])\n      return Promise.resolve(extent)\n    } else {\n      throw new Error('Unknown extent specification: ' + extent)\n    }\n  }\n  \n  /**\n   * Return the displayed value (number, or null for no-data),\n   * or undefined if no parameter is set.\n   * \n   * @returns {number|null|undefined}\n   */\n  getValue () {\n    if (this._param) {\n      return this.range.get({})\n    }    \n  }\n  \n  /**\n   * Return the displayed value if within the given distance of the reference point.\n   * If out of bounds, then undefined is returned, otherwise a number or null (for no data).\n   * \n   * @param {L.LatLng} latlng\n   * @param {number} maxDistance Maximum distance in meters between both points.\n   * @returns {number|null|undefined}\n   */\n  getValueAt (latlng, maxDistance) {\n    let point = this.getLatLng()\n    if (point.distanceTo(latlng) <= maxDistance) {\n      return this.getValue()\n    }\n  }\n  \n  _getColor (val) {\n    if (val === null) {\n      // no-data\n      return this._defaultColor\n    } else if (val === undefined) {\n      // not fixed to a param\n      return this._defaultColor\n    } else {\n      // use a palette\n      let idx = this.getPaletteIndex(val)\n      let {red, green, blue} = this.palette\n      return {r: red[idx], g: green[idx], b: blue[idx]}\n    }\n  }\n}\n","import L from 'leaflet'\r\nimport {isDomain, fromDomain, minMaxOfRange} from 'covutils'\r\n\r\nimport {enlargeExtentIfEqual} from './palettes.js'\r\nimport {CoverageMixin} from './CoverageMixin.js'\r\nimport {PaletteMixin} from './PaletteMixin.js'\r\n\r\nimport {DEFAULT_COLOR} from './Point.js'\r\n  \r\n/**\r\n * Renderer for Coverages and Domains conforming to the CovJSON domain type `Trajectory`.\r\n * \r\n * Displays the trajectory as a path with coloured points using\r\n * a given palette for a given parameter.\r\n * \r\n * @example\r\n * var cov = ... // get Coverage data\r\n * var layer = new C.Trajectory(cov, {\r\n *   parameter: 'salinity',\r\n *   defaultColor: 'black',\r\n *   palette: C.linearPalette(['#FFFFFF', '#000000'])\r\n * })\r\n * \r\n * @see https://covjson.org/domain-types/#trajectory\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#dataLoading} Data loading has started\r\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * @emits {Point#click} when a point was clicked\r\n * \r\n * @extends {L.FeatureGroup}\r\n * @extends {CoverageMixin}\r\n * @extends {PaletteMixin}\r\n * @implements {DataLayer}\r\n * \r\n */\r\nexport class Trajectory extends PaletteMixin(CoverageMixin(L.FeatureGroup)) {\r\n  \r\n  // TODO FeatureGroup is not ideal since click events etc should not be blindly propagated\r\n  //    (we use it for now to have getBounds() which LayerGroup misses)\r\n  \r\n  /**\r\n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full' or specific: [-10,10].\r\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\r\n   */\r\n  constructor (cov, options) {\r\n    super()\r\n    \r\n    if (isDomain(cov)) {\r\n      cov = fromDomain(cov)\r\n      delete options.keys\r\n      options.parameter = cov.parameters.keys().next().value\r\n    }\r\n    \r\n    if (!options.paletteExtent) {\r\n      options.paletteExtent = 'full'\r\n    }\r\n    \r\n    L.Util.setOptions(this, options)\r\n    \r\n    this._cov = cov\r\n    let paramKey = options.keys ? options.keys[0] : options.parameter\r\n    this._param = paramKey ? cov.parameters.get(paramKey) : null\r\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n    \r\n    this.load()\r\n      .then(() => this.initializePalette())\r\n      .then(() => {\r\n        this._addTrajectoryLayers()\r\n        this.fire('afterAdd')\r\n      })\r\n  }\r\n    \r\n  /**\r\n   * The coverage object associated to this layer.\r\n   * \r\n   * @type {Coverage}\r\n   */\r\n  get coverage () {\r\n    return this._cov\r\n  }\r\n  \r\n  /**\r\n   * The parameter that is visualized.\r\n   * \r\n   * @type {Parameter}\r\n   */\r\n  get parameter () {\r\n    return this._param\r\n  }\r\n  \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  computePaletteExtent (extent) {\r\n    let range = this.range\r\n        \r\n    if (extent === 'full') {\r\n      // scan the whole range for min/max values\r\n      \r\n    } else if (extent === 'fov') {\r\n      // scan the values that are currently in field of view on the map for min/max\r\n      let bounds = this._map.getBounds()\r\n\r\n      // TODO implement\r\n      throw new Error('NOT IMPLEMENTED YET')      \r\n    } else {\r\n      throw new Error('Unknown extent specification: ' + extent)\r\n    }\r\n\r\n    extent = minMaxOfRange(range)\r\n    extent = enlargeExtentIfEqual(extent)    \r\n    return Promise.resolve(extent)\r\n  }\r\n  \r\n  _addTrajectoryLayers () {\r\n    // add a Polyline in black, and coloured CircleMarker's for each domain point\r\n    let points = this.getLatLngs()\r\n    for (let i=0; i < points.length; i++) {\r\n      let marker = new L.CircleMarker(points[i], {\r\n        color: this._getColor(this._getValue(i)),\r\n        opacity: 1,\r\n        fillOpacity: 1\r\n      })\r\n      this.addLayer(marker)\r\n    }\r\n    \r\n    let polyline = L.polyline(points, {\r\n      color: 'black',\r\n      weight: 3\r\n    })\r\n    \r\n    this.addLayer(polyline)\r\n  }\r\n  \r\n  /**\r\n   * Returns the trajectory points as LatLng objects in the order they appear in the composite domain axis.\r\n   * \r\n   * @return {Array<L.LatLng>}\r\n   */\r\n  getLatLngs () {\r\n    let axis = this.domain.axes.get('composite')\r\n    let ix = axis.coordinates.indexOf(this._projX)\r\n    let iy = axis.coordinates.indexOf(this._projY)\r\n    let coords = []\r\n    for (let i=0; i < axis.values.length; i++) {\r\n      let x = axis.values[i][ix]\r\n      let y = axis.values[i][iy]\r\n      let latlng = this.projection.unproject({x,y})\r\n      let coord = L.latLng(latlng)\r\n      coords.push(coord)\r\n    }\r\n    return coords\r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value closest to the circle centre.\r\n   * If no point exists within the circle, undefined is returned,\r\n   * otherwise a number or null (for no-data).\r\n   * \r\n   * @param {L.LatLng} latlng\r\n   * @param {number} maxDistance Maximum distance in meters between both points.\r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValueAt (latlng, maxDistance) {\r\n    let points = this.getLatLngs()\r\n    let distances = points.map(p => p.distanceTo(latlng))\r\n    let minDistance = Infinity\r\n    let minIdx\r\n    for (let i=0; i < points.length; i++) {\r\n      let distance = distances[i]\r\n      if (distance <= maxDistance && distance < minDistance) {\r\n        minDistance = distance\r\n        minIdx = i\r\n      }\r\n    }\r\n    if (minIdx !== undefined) {\r\n      return this._getValue(minIdx)\r\n    }\r\n  }\r\n  \r\n  _getValue (index) {\r\n    if (this._param) {\r\n      return this.range.get({composite: index})\r\n    }\r\n  }\r\n  \r\n  // NOTE: this returns a string, not an {r,g,b} object as in other classes!\r\n  _getColor (val) {\r\n    if (val === null) {\r\n      // no-data\r\n      return this._defaultColor\r\n    } else if (val === undefined) {\r\n      // not fixed to a param\r\n      return this._defaultColor\r\n    } else {\r\n      // use a palette\r\n      let idx = this.getPaletteIndex(val)\r\n      let {red, green, blue} = this.palette\r\n      return `rgb(${red[idx]}, ${green[idx]}, ${blue[idx]})`\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Redraw the layer.\r\n   */\r\n  redraw () {\r\n    this.clearLayers()\r\n    this._addTrajectoryLayers()\r\n  }\r\n  \r\n}\r\n","import L from 'leaflet'\nimport {isDomain, fromDomain, indexOfNearest, minMaxOfRange} from 'covutils'\n\nimport {enlargeExtentIfEqual} from './palettes.js'\nimport {CoverageMixin} from './CoverageMixin.js'\nimport {CircleMarkerMixin} from './CircleMarkerMixin.js'\nimport {PaletteMixin} from './PaletteMixin.js'\nimport {EventMixin} from '../util/EventMixin.js'\n\nimport {DEFAULT_COLOR} from './Point.js'\n\n// TODO nearly identical to VerticalProfile\n\n/**\n * Renderer for Coverages conforming to the CovJSON domain type `PointSeries`.\n * \n * This will simply display a dot on the map and fire a click event when a user clicks on it.\n * The dot either has a defined standard color, or it uses a palette if a parameter is chosen.\n * \n * @example\n * var cov = ... // get Coverage data\n * var layer = new C.PointSeries(cov, {\n *   parameter: 'salinity',\n *   time: new Date('2015-01-01T12:00:00Z'),\n *   defaultColor: 'black',\n *   palette: C.linearPalette(['#FFFFFF', '#000000'])\n * })\n * \n * @see https://covjson.org/domain-types/#pointseries\n * \n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\n * @emits {DataLayer#dataLoading} Data loading has started\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\n * @emits {DataLayer#error} Error when loading data\n * @emits {PaletteMixin#paletteChange} Palette has changed\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\n * @emits {Point#click} when the point was clicked\n * \n * @extends {L.Layer}\n * @extends {CoverageMixin}\n * @extends {CircleMarkerMixin}\n * @extends {PaletteMixin}\n * @implements {DataLayer}\n * @implements {PointDataLayer}\n */\nexport class PointSeries extends PaletteMixin(CircleMarkerMixin(CoverageMixin(L.Layer))) {\n  \n  /**\n   * An optional time axis target value can be defined with the 'time' property.\n   * The closest values on the time axis is chosen.\n   * \n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\n   * @param {Object} [options] The options object.\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\n   * @param {Date} [options.time] The initial time step to display.\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full' or specific: [-10,10].\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\n   * @param {boolean} [options.showNoData=false] Whether to draw the point if there is no data.\n   */\n  constructor (cov, options) {\n    super()\n    \n    if (isDomain(cov)) {\n      cov = fromDomain(cov)\n      delete options.keys\n      options.parameter = cov.parameters.keys().next().value\n    }\n    \n    if (!options.paletteExtent) {\n      options.paletteExtent = 'full'\n    }\n    \n    L.Util.setOptions(this, options)\n\n    this._cov = cov\n    let paramKey = options.keys ? options.keys[0] : options.parameter\n    this._param = paramKey ? cov.parameters.get(paramKey) : null\n    this._axesSubset = {\n      t: {coordPref: options.time}\n    }\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\n\n    /** @ignore */\n    this.showNoData = options.showNoData // if true, draw with default color\n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  onAdd (map) {\n    this._map = map\n\n    this.load()\n      .then(() => this.initializePalette())\n      .then(() => {\n        this._addMarker()\n        this.fire('afterAdd')\n      })\n  }\n  \n  _loadCoverageSubset () {\n    // adapted from Grid.js\n    let t = this._axesSubset.t\n    if (t.coordPref == undefined) {\n      t.idx = t.coord = undefined\n    } else {\n      let vals = this.domain.axes.get('t').values.map(v => v.getTime())\n      t.idx = indexOfNearest(vals, t.coordPref.getTime())\n      t.coord = vals[t.idx]\n    }\n    \n    // Note that we don't subset the coverage currently, since there is no real need for it\n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  onRemove () {\n    this._removeMarker()\n  }\n  \n  /**\n   * Returns the geographic bounds of the coverage, which is a degenerate box collapsed to a point.\n   * \n   * @return {L.LatLngBounds}\n   */\n  getBounds () {\n    return L.latLngBounds([this.getLatLng()])\n  }\n  \n  /**\n   * Returns the geographical position of the coverage.\n   * \n   * @return {L.LatLng}\n   */\n  getLatLng () {\n    let x = this.domain.axes.get(this._projX).values[0]\n    let y = this.domain.axes.get(this._projY).values[0]\n    let latlng = this.projection.unproject({x,y})\n    return L.latLng(latlng)\n  }\n  \n  /**\n   * The coverage object associated to this layer.\n   * \n   * @type {Coverage}\n   */\n  get coverage () {\n    return this._cov\n  }\n    \n  /**\n   * The parameter that is visualized.\n   * \n   * @type {Parameter}\n   */\n  get parameter () {\n    return this._param\n  }\n  \n  /**\n   * Sets the currently active time to the one closest to the given Date object.\n   * \n   * @type {Date|undefined}\n   */\n  set time (val) {\n    let old = this.time\n    this._axesSubset.t.coordPref = val ? val.toISOString() : undefined\n    \n    this._loadCoverageSubset()\n    if (old === this.time) return\n    this.redraw()\n    this.fire('axisChange', {axis: 'time'})\n  }\n  \n  /**\n   * The currently active time on the temporal axis as Date object, \n   * or undefined if no time is set.\n   * \n   * @type {Date|undefined}\n   */\n  get time () {\n    if (!this._axesSubset.t.coord) {\n      return\n    }\n    let time = this.domain.axes.get('t').values[this._axesSubset.t.idx]\n    return new Date(time)\n  }\n  \n  /**\n   * The time slices that make up the coverage.\n   * \n   * @type {Array<Date>}\n   */\n  get timeSlices () {\n    return this.domain.axes.get('t').values.map(t => new Date(t))\n  }\n  \n  /**\n   * See {@link PaletteMixin}.\n   * \n   * @ignore\n   */\n  canUsePalette () {\n    return this.time !== undefined\n  }\n  \n  /**\n   * See {@link PaletteMixin}.\n   * \n   * @ignore\n   */\n  computePaletteExtent (extent) {\n    if (extent === 'full') {\n      if (!this.parameter) {\n        throw new Error('palette extent cannot be set when no parameter has been chosen')\n      }\n      \n      extent = minMaxOfRange(this.range)\n      extent = enlargeExtentIfEqual(extent)\n      return Promise.resolve(extent)\n    } else {\n      throw new Error('Unknown extent specification: ' + extent)\n    }\n  }\n    \n  /**\n   * Return the displayed value (number, or null for no-data),\n   * or undefined if not fixed to a t-coordinate or parameter.\n   * \n   * @returns {number|null|undefined}\n   */\n  getValue () {\n    if (this._param && this._axesSubset.t.coord !== undefined) {\n      let val = this.range.get({t: this._axesSubset.t.idx})\n      return val\n    }    \n  }\n  \n  /**\n   * Return the displayed value if within the given distance of the reference point.\n   * If out of bounds, then undefined is returned, otherwise a number or null (for no data).\n   * \n   * @param {L.LatLng} latlng\n   * @param {number} maxDistance Maximum distance in meters between both points.\n   * @returns {number|null|undefined}\n   */\n  getValueAt (latlng, maxDistance) {\n    let point = this.getLatLng()\n    if (point.distanceTo(latlng) <= maxDistance) {\n      return this.getValue()\n    }\n  }\n  \n  _getColor () {\n    let val = this.getValue()\n    if (val === null) {\n      // no-data\n      return this._defaultColor\n    } else if (val === undefined) {\n      // not fixed to a param or z-coordinate\n      return this._defaultColor\n    } else {\n      // use a palette\n      let idx = this.getPaletteIndex(val)\n      let {red, green, blue} = this.palette\n      return {r: red[idx], g: green[idx], b: blue[idx]}\n    }\n  }\n}\n","// 2016-02-23 Maik Riechert - adjust boilerplate to make it node compatible\n\n/**\n * k-d Tree JavaScript - V 1.01\n *\n * https://github.com/ubilabs/kd-tree-javascript\n *\n * @author Mircea Pricop <pricop@ubilabs.net>, 2012\n * @author Martin Kleppe <kleppe@ubilabs.net>, 2012\n * @author Ubilabs http://ubilabs.net, 2012\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n */\n\n\n\n  function Node(obj, dimension, parent) {\n    this.obj = obj;\n    this.left = null;\n    this.right = null;\n    this.parent = parent;\n    this.dimension = dimension;\n  }\n\n  function kdTree(points, metric, dimensions) {\n\n    var self = this;\n    \n    function buildTree(points, depth, parent) {\n      var dim = depth % dimensions.length,\n        median,\n        node;\n\n      if (points.length === 0) {\n        return null;\n      }\n      if (points.length === 1) {\n        return new Node(points[0], dim, parent);\n      }\n\n      points.sort(function (a, b) {\n        return a[dimensions[dim]] - b[dimensions[dim]];\n      });\n\n      median = Math.floor(points.length / 2);\n      node = new Node(points[median], dim, parent);\n      node.left = buildTree(points.slice(0, median), depth + 1, node);\n      node.right = buildTree(points.slice(median + 1), depth + 1, node);\n\n      return node;\n    }\n\n    // Reloads a serialied tree\n    function loadTree (data) {\n      // Just need to restore the `parent` parameter\n      self.root = data;\n\n      function restoreParent (root) {\n        if (root.left) {\n          root.left.parent = root;\n          restoreParent(root.left);\n        }\n\n        if (root.right) {\n          root.right.parent = root;\n          restoreParent(root.right);\n        }\n      }\n\n      restoreParent(self.root);\n    }\n    \n    // If points is not an array, assume we're loading a pre-built tree\n    if (!Array.isArray(points)) loadTree(points, metric, dimensions);\n    else this.root = buildTree(points, 0, null);\n\n    // Convert to a JSON serializable structure; this just requires removing \n    // the `parent` property\n    this.toJSON = function (src) {\n      if (!src) src = this.root;\n      var dest = new Node(src.obj, src.dimension, null);\n      if (src.left) dest.left = self.toJSON(src.left);\n      if (src.right) dest.right = self.toJSON(src.right);\n      return dest;\n    };\n\n    this.insert = function (point) {\n      function innerSearch(node, parent) {\n\n        if (node === null) {\n          return parent;\n        }\n\n        var dimension = dimensions[node.dimension];\n        if (point[dimension] < node.obj[dimension]) {\n          return innerSearch(node.left, node);\n        } else {\n          return innerSearch(node.right, node);\n        }\n      }\n\n      var insertPosition = innerSearch(this.root, null),\n        newNode,\n        dimension;\n\n      if (insertPosition === null) {\n        this.root = new Node(point, 0, null);\n        return;\n      }\n\n      newNode = new Node(point, (insertPosition.dimension + 1) % dimensions.length, insertPosition);\n      dimension = dimensions[insertPosition.dimension];\n\n      if (point[dimension] < insertPosition.obj[dimension]) {\n        insertPosition.left = newNode;\n      } else {\n        insertPosition.right = newNode;\n      }\n    };\n\n    this.remove = function (point) {\n      var node;\n\n      function nodeSearch(node) {\n        if (node === null) {\n          return null;\n        }\n\n        if (node.obj === point) {\n          return node;\n        }\n\n        var dimension = dimensions[node.dimension];\n\n        if (point[dimension] < node.obj[dimension]) {\n          return nodeSearch(node.left, node);\n        } else {\n          return nodeSearch(node.right, node);\n        }\n      }\n\n      function removeNode(node) {\n        var nextNode,\n          nextObj,\n          pDimension;\n\n        function findMin(node, dim) {\n          var dimension,\n            own,\n            left,\n            right,\n            min;\n\n          if (node === null) {\n            return null;\n          }\n\n          dimension = dimensions[dim];\n\n          if (node.dimension === dim) {\n            if (node.left !== null) {\n              return findMin(node.left, dim);\n            }\n            return node;\n          }\n\n          own = node.obj[dimension];\n          left = findMin(node.left, dim);\n          right = findMin(node.right, dim);\n          min = node;\n\n          if (left !== null && left.obj[dimension] < own) {\n            min = left;\n          }\n          if (right !== null && right.obj[dimension] < min.obj[dimension]) {\n            min = right;\n          }\n          return min;\n        }\n\n        if (node.left === null && node.right === null) {\n          if (node.parent === null) {\n            self.root = null;\n            return;\n          }\n\n          pDimension = dimensions[node.parent.dimension];\n\n          if (node.obj[pDimension] < node.parent.obj[pDimension]) {\n            node.parent.left = null;\n          } else {\n            node.parent.right = null;\n          }\n          return;\n        }\n\n        // If the right subtree is not empty, swap with the minimum element on the\n        // node's dimension. If it is empty, we swap the left and right subtrees and\n        // do the same.\n        if (node.right !== null) {\n          nextNode = findMin(node.right, node.dimension);\n          nextObj = nextNode.obj;\n          removeNode(nextNode);          \n          node.obj = nextObj;\n        } else {\n          nextNode = findMin(node.left, node.dimension);\n          nextObj = nextNode.obj;\n          removeNode(nextNode);\n          node.right = node.left;\n          node.left = null;\n          node.obj = nextObj;\n        }\n\n      }\n\n      node = nodeSearch(self.root);\n\n      if (node === null) { return; }\n\n      removeNode(node);\n    };\n\n    this.nearest = function (point, maxNodes, maxDistance) {\n      var i,\n        result,\n        bestNodes;\n\n      bestNodes = new BinaryHeap(\n        function (e) { return -e[1]; }\n      );\n\n      function nearestSearch(node) {\n        var bestChild,\n          dimension = dimensions[node.dimension],\n          ownDistance = metric(point, node.obj),\n          linearPoint = {},\n          linearDistance,\n          otherChild,\n          i;\n\n        function saveNode(node, distance) {\n          bestNodes.push([node, distance]);\n          if (bestNodes.size() > maxNodes) {\n            bestNodes.pop();\n          }\n        }\n\n        for (i = 0; i < dimensions.length; i += 1) {\n          if (i === node.dimension) {\n            linearPoint[dimensions[i]] = point[dimensions[i]];\n          } else {\n            linearPoint[dimensions[i]] = node.obj[dimensions[i]];\n          }\n        }\n\n        linearDistance = metric(linearPoint, node.obj);\n\n        if (node.right === null && node.left === null) {\n          if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n            saveNode(node, ownDistance);\n          }\n          return;\n        }\n\n        if (node.right === null) {\n          bestChild = node.left;\n        } else if (node.left === null) {\n          bestChild = node.right;\n        } else {\n          if (point[dimension] < node.obj[dimension]) {\n            bestChild = node.left;\n          } else {\n            bestChild = node.right;\n          }\n        }\n\n        nearestSearch(bestChild);\n\n        if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n          saveNode(node, ownDistance);\n        }\n\n        if (bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[1]) {\n          if (bestChild === node.left) {\n            otherChild = node.right;\n          } else {\n            otherChild = node.left;\n          }\n          if (otherChild !== null) {\n            nearestSearch(otherChild);\n          }\n        }\n      }\n\n      if (maxDistance) {\n        for (i = 0; i < maxNodes; i += 1) {\n          bestNodes.push([null, maxDistance]);\n        }\n      }\n\n      if(self.root)\n        nearestSearch(self.root);\n\n      result = [];\n\n      for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {\n        if (bestNodes.content[i][0]) {\n          result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);\n        }\n      }\n      return result;\n    };\n\n    this.balanceFactor = function () {\n      function height(node) {\n        if (node === null) {\n          return 0;\n        }\n        return Math.max(height(node.left), height(node.right)) + 1;\n      }\n\n      function count(node) {\n        if (node === null) {\n          return 0;\n        }\n        return count(node.left) + count(node.right) + 1;\n      }\n\n      return height(self.root) / (Math.log(count(self.root)) / Math.log(2));\n    };\n  }\n\n  // Binary heap implementation from:\n  // http://eloquentjavascript.net/appendix2.html\n\n  function BinaryHeap(scoreFunction){\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  BinaryHeap.prototype = {\n    push: function(element) {\n      // Add the new element to the end of the array.\n      this.content.push(element);\n      // Allow it to bubble up.\n      this.bubbleUp(this.content.length - 1);\n    },\n\n    pop: function() {\n      // Store the first element so we can return it later.\n      var result = this.content[0];\n      // Get the element at the end of the array.\n      var end = this.content.pop();\n      // If there are any elements left, put the end element at the\n      // start, and let it sink down.\n      if (this.content.length > 0) {\n        this.content[0] = end;\n        this.sinkDown(0);\n      }\n      return result;\n    },\n\n    peek: function() {\n      return this.content[0];\n    },\n\n    remove: function(node) {\n      var len = this.content.length;\n      // To remove a value, we must search through the array to find\n      // it.\n      for (var i = 0; i < len; i++) {\n        if (this.content[i] == node) {\n          // When it is found, the process seen in 'pop' is repeated\n          // to fill up the hole.\n          var end = this.content.pop();\n          if (i != len - 1) {\n            this.content[i] = end;\n            if (this.scoreFunction(end) < this.scoreFunction(node))\n              this.bubbleUp(i);\n            else\n              this.sinkDown(i);\n          }\n          return;\n        }\n      }\n      throw new Error(\"Node not found.\");\n    },\n\n    size: function() {\n      return this.content.length;\n    },\n\n    bubbleUp: function(n) {\n      // Fetch the element that has to be moved.\n      var element = this.content[n];\n      // When at 0, an element can not go up any further.\n      while (n > 0) {\n        // Compute the parent element's index, and fetch it.\n        var parentN = Math.floor((n + 1) / 2) - 1,\n            parent = this.content[parentN];\n        // Swap the elements if the parent is greater.\n        if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n          this.content[parentN] = element;\n          this.content[n] = parent;\n          // Update 'n' to continue at the new position.\n          n = parentN;\n        }\n        // Found a parent that is less, no need to move it further.\n        else {\n          break;\n        }\n      }\n    },\n\n    sinkDown: function(n) {\n      // Look up the target element and its score.\n      var length = this.content.length,\n          element = this.content[n],\n          elemScore = this.scoreFunction(element);\n\n      while(true) {\n        // Compute the indices of the child elements.\n        var child2N = (n + 1) * 2, child1N = child2N - 1;\n        // This is used to store the new position of the element,\n        // if any.\n        var swap = null;\n        // If the first child exists (is inside the array)...\n        if (child1N < length) {\n          // Look it up and compute its score.\n          var child1 = this.content[child1N],\n              child1Score = this.scoreFunction(child1);\n          // If the score is less than our element's, we need to swap.\n          if (child1Score < elemScore)\n            swap = child1N;\n        }\n        // Do the same checks for the other child.\n        if (child2N < length) {\n          var child2 = this.content[child2N],\n              child2Score = this.scoreFunction(child2);\n          if (child2Score < (swap == null ? elemScore : child1Score)){\n            swap = child2N;\n          }\n        }\n\n        // If the element needs to be moved, swap it, and continue.\n        if (swap != null) {\n          this.content[n] = this.content[swap];\n          this.content[swap] = element;\n          n = swap;\n        }\n        // Otherwise, we are done.\n        else {\n          break;\n        }\n      }\n    }\n  };\n  \nexport {kdTree, BinaryHeap}\n","import L from 'leaflet'\n\nimport {PaletteMixin} from './PaletteMixin.js'\nimport {EventMixin} from '../util/EventMixin.js'\nimport {Point, DEFAULT_COLOR} from './Point.js'\nimport {enlargeExtentIfEqual} from './palettes.js'\nimport {kdTree} from '../util/kdTree.js'\n\n/**\n * A collection of points sharing the same parameters and coordinate referencing system.\n * \n * @see https://covjson.org/domain-types/#point\n * \n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\n * @emits {DataLayer#error} Error when loading data\n * @emits {PaletteMixin#paletteChange} Palette has changed\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\n * @emits {Point#click} when the point was clicked\n * \n * @extends {L.Layer}\n * @extends {PaletteMixin} \n */\nexport class PointCollection extends PaletteMixin(L.Layer) {\n  /**\n   * @param {CoverageCollection} covcoll The coverage collection to visualize.\n   * @param {Object} [options] The options object.\n   * @param {string} [options.parameter] The key of the parameter to display.\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full', 'fov', or specific: [-10,10].\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\n   * @param {class} [options.pointClass=Point] The {@link PointDataLayer} class to use for the individual points.\n   * @param {function} [options.pointOptionsFn] A function that returns additional options to apply for each point class instance.  \n   */\n  constructor (covcoll, options={}) {\n    super()\n    \n    // TODO how should we handle collection paging?\n    \n    if (!options.paletteExtent) {\n      options.paletteExtent = 'full'\n    }\n    \n    L.Util.setOptions(this, options)\n\n    this._covcoll = covcoll\n    let paramKey = options.keys ? options.keys[0] : options.parameter\n    this._param = paramKey ? covcoll.parameters.get(paramKey) : null\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\n    this._pointClass = options.pointClass || Point\n        \n    this._layerGroup = L.layerGroup()\n    this._layers = []\n    this._kdtree = undefined\n    \n    this.on('paletteChange', () => {\n      for (let layer of this._layers) {\n        layer.palette = this.palette\n      }\n    })\n    this.on('paletteExtentChange', () => {\n      for (let layer of this._layers) {\n        layer.paletteExtent = this.paletteExtent\n      }\n    })\n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  onAdd (map) {\n    this._map = map\n    this._layerLoadCount = 0\n    this._layerErrors = []\n    \n    let options = {\n      keys: this._param ? [this._param.key] : undefined,\n      defaultColor: this._defaultColor,\n      palette: this.palette,\n      paletteExtent: this.paletteExtent\n    }\n    if (this.options.pointOptionsFn) {\n      let opts = this.options.pointOptionsFn()\n      for (let key in opts) {\n        options[key] = opts[key]\n      }\n    }\n    for (let cov of this._covcoll.coverages) {\n      let layer = new this._pointClass(cov, options)\n      this._attachListeners(layer, cov)\n      this._layerGroup.addLayer(layer)\n      this._layers.push(layer)\n      layer.load()\n      if (this._popupFn) {\n        let popup = this._popupFn(layer.coverage)\n        layer.bindPopup(popup)\n      }\n    }\n    \n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  onRemove (map) {\n    map.removeLayer(this._layerGroup)\n    this._layerGroup = L.layerGroup()\n    this._layers = []\n  }\n  \n  /**\n   * Binds a popup to each point instance.\n   * \n   * @param {function(cov: Coverage):String|HTMLElement|L.Popup} fn Returns the popup for a given point coverage. \n   */\n  bindPopupEach (fn) {\n    this._popupFn = fn\n  }\n  \n  _attachListeners (layer, cov) {\n    layer.once('dataLoad', () => {\n      ++this._layerLoadCount\n      this._fireIfOnAddDone()\n    }).once('error', e => {\n      this._layerErrors.push(e)\n    }).on('click', e => {\n      e.coverage = cov\n      this.fire('click', e)\n    })\n  }\n  \n  _fireIfOnAddDone () {\n    if (this._layerLoadCount === this._layers.length) {\n      if (this._layerErrors.length > 0) {\n        this.fire('error', {errors: this._layerErrors})\n      } else {\n        this._initKdtree()\n        this.initializePalette().then(() => {\n          this._layerGroup.addTo(this._map)\n          this.fire('afterAdd')\n        })\n      }\n    }\n  }\n  \n  _initKdtree () {\n    let points = this._layers.map(layer => {\n      let point = layer.getLatLng()\n      point.layer = layer\n      return point\n    })\n    let distance = (point1, point2) => L.LatLng.prototype.distanceTo.call(point1, point2)\n    let dimensions = ['lat', 'lng']\n    this._kdtree = new kdTree(points, distance, dimensions)\n  }\n  \n  /**\n   * Returns the geographic bounds of the coverage collection.\n   * \n   * @return {L.LatLngBounds}\n   */\n  getBounds () {\n    return L.latLngBounds(this._layers.map(layer => layer.getLatLng()))\n  }\n  \n  /**\n   * Return the displayed value of the point coverage closest to\n   * the given position and within the given maximum distance.\n   * If no coverage is found, undefined is returned, otherwise\n   * a number or null (no-data).\n   * \n   * @param {L.LatLng} latlng reference position\n   * @param {number} maxDistance\n   *   Maximum distance in meters that the point coverage may be\n   *   apart from the given position.\n   * @return {number|null|undefined}\n   */\n  getValueAt (latlng, maxDistance) {\n    let points = this._kdtree.nearest(latlng, 1, maxDistance)\n    if (points.length > 0) {\n      let point = points[0][0]\n      let val = point.layer.getValue()\n      return val\n    }\n  }\n  \n  /**\n   * The parameter that is visualized.\n   * \n   * @type {Parameter}\n   */\n  get parameter () {\n    return this._param\n  }\n    \n  /**\n   * See {@link PaletteMixin}.\n   * \n   * @ignore\n   */\n  computePaletteExtent (extent) {\n    if (!this._param) {\n      throw new Error('palette extent cannot be set when no parameter has been chosen')\n    }\n    \n    let layers\n    if (extent === 'full') {\n      layers = this._layers\n    } else if (extent === 'fov') {\n      let bounds = this._map.getBounds()\n      layers = this._layers.filter(layer => bounds.contains(layer.getLatLng()))\n    } else {\n      throw new Error('Unsupported: ' + extent)\n    }\n    \n    let min = Infinity\n    let max = -Infinity\n    for (let layer of layers) {\n      let val = layer.getValue()\n      if (val != null) {\n        min = Math.min(min, val)\n        max = Math.max(max, val)\n      }\n    }\n    extent = enlargeExtentIfEqual([min, max])\n    return Promise.resolve(extent)\n  }\n  \n  /**\n   * Redraw each point layer.\n   */\n  redraw () {\n    for (let layer of this._layers) {\n      layer.redraw()\n    }\n  }\n}\n","import L from 'leaflet'\nimport {isDomain, fromDomain, indexOfNearest, minMaxOfRange} from 'covutils'\n\nimport {enlargeExtentIfEqual} from './palettes.js'\nimport {CoverageMixin} from './CoverageMixin.js'\nimport {CircleMarkerMixin} from './CircleMarkerMixin.js'\nimport {PaletteMixin} from './PaletteMixin.js'\nimport {EventMixin} from '../util/EventMixin.js'\n\nimport {DEFAULT_COLOR} from './Point.js'\n\n/**\n * Renderer for Coverages conforming to the CovJSON domain type `VerticalProfile`.\n * \n * This will simply display a dot on the map and fire a click event when a user clicks on it.\n * The dot either has a defined standard color, or it uses\n * a palette together with a target depth if a parameter is chosen.\n * \n * @example\n * var cov = ... // get Coverage data\n * var layer = new C.VerticalProfile(cov, {\n *   parameter: 'salinity',\n *   vertical: 30,\n *   defaultColor: 'black',\n *   palette: C.linearPalette(['#FFFFFF', '#000000'])\n * })\n * \n * @see https://covjson.org/domain-types/#verticalprofile\n * \n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\n * @emits {DataLayer#dataLoading} Data loading has started\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\n * @emits {DataLayer#error} Error when loading data\n * @emits {DataLayer#axisChange} Axis coordinate has changed (e.axis === 'vertical')\n * @emits {PaletteMixin#paletteChange} Palette has changed\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\n * @emits {Point#click} when the point was clicked\n * \n * @extends {L.Layer}\n * @extends {CoverageMixin}\n * @extends {CircleMarkerMixin}\n * @extends {PaletteMixin}\n * @implements {DataLayer}\n * @implements {PointDataLayer}\n */\nexport class VerticalProfile extends PaletteMixin(CircleMarkerMixin(CoverageMixin(L.Layer))) {\n  \n  /**\n   * An optional vertical axis target value can be defined with the 'vertical' property.\n   * The closest values on the vertical axis is chosen.\n   * \n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\n   * @param {Object} [options] The options object.\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\n   * @param {number} [options.vertical] The initial vertical slice to display.\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full' or specific: [-10,10].\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\n   * @param {boolean} [options.showNoData=false] Whether to draw the point if there is no data.\n   */\n  constructor (cov, options) {\n    super()\n    \n    if (isDomain(cov)) {\n      cov = fromDomain(cov)\n      delete options.keys\n      options.parameter = cov.parameters.keys().next().value\n    }\n    \n    if (!options.paletteExtent) {\n      options.paletteExtent = 'full'\n    }\n    \n    L.Util.setOptions(this, options)\n\n    this._cov = cov\n    let paramKey = options.keys ? options.keys[0] : options.parameter\n    this._param = paramKey ? cov.parameters.get(paramKey) : null\n    this._axesSubset = {\n      z: {coordPref: options.vertical}\n    }\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\n\n    /** @ignore */\n    this.showNoData = options.showNoData // if true, draw with default color\n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  onAdd (map) {\n    this._map = map\n\n    this.load()\n      .then(() => this.initializePalette())\n      .then(() => {\n        this._addMarker()\n        this.fire('afterAdd')\n      })\n  }\n    \n  _loadCoverageSubset () {\n    // adapted from Grid.js\n    let z = this._axesSubset.z\n    if (z.coordPref == undefined) {\n      z.idx = z.coord = undefined\n    } else {\n      let vals = this.domain.axes.get('z').values\n      z.idx = indexOfNearest(vals, z.coordPref)\n      z.coord = vals[z.idx]\n    }\n    \n    // Note that we don't subset the coverage currently, since there is no real need for it\n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  onRemove () {\n    this._removeMarker()\n  }\n  \n  /**\n   * Returns the geographic bounds of the coverage, which is a degenerate box collapsed to a point.\n   * \n   * @return {L.LatLngBounds}\n   */\n  getBounds () {\n    return L.latLngBounds([this.getLatLng()])\n  }\n  \n  /**\n   * Returns the geographical position of the coverage.\n   * \n   * @return {L.LatLng}\n   */\n  getLatLng () {\n    let x = this.domain.axes.get(this._projX).values[0]\n    let y = this.domain.axes.get(this._projY).values[0]\n    let latlng = this.projection.unproject({x,y})\n    return L.latLng(latlng)\n  }\n  \n  /**\n   * The coverage object associated to this layer.\n   * \n   * @type {Coverage}\n   */\n  get coverage () {\n    return this._cov\n  }\n    \n  /**\n   * The parameter that is visualized.\n   * \n   * @type {Parameter}\n   */\n  get parameter () {\n    return this._param\n  }\n  \n  /**\n   * The currently active vertical coordinate, or undefined if no coordinate is set.\n   * \n   * @type {number|undefined}\n   */\n  get vertical () {\n    return this._axesSubset.z.coord\n  }\n  \n  /**\n   * Sets the currently active vertical coordinate to the one closest to the given value.\n   * \n   * @type {number|undefined}\n   */\n  set vertical (val) {\n    this._axesSubset.z.coordPref = val\n    this._loadCoverageSubset()\n    this.redraw()\n    this.fire('axisChange', {axis: 'vertical'}) \n  }\n  \n  /**\n   * The vertical slices that make up the coverage.\n   * \n   * @type {Array<number>}\n   */\n  get verticalSlices () {\n    let vals = this.domain.axes.get('z').values\n    if (ArrayBuffer.isView(vals)) {\n      // convert to plain Array to allow easier use\n      vals = [...vals]\n    }\n    return vals\n  }\n    \n  /**\n   * See {@link PaletteMixin}.\n   * \n   * @ignore\n   */\n  canUsePalette () {\n    return this.vertical !== undefined\n  }\n    \n  /**\n   * See {@link PaletteMixin}.\n   * \n   * @ignore\n   */\n  computePaletteExtent (extent) {\n    if (extent === 'full') {\n      if (!this.parameter) {\n        throw new Error('palette extent cannot be set when no parameter has been chosen')\n      }\n      \n      extent = minMaxOfRange(this.range)\n      extent = enlargeExtentIfEqual(extent)\n      return Promise.resolve(extent)\n    } else {\n      throw new Error('Unknown extent specification: ' + extent)\n    }\n  }\n    \n  /**\n   * Return the displayed value (number, or null for no-data),\n   * or undefined if not fixed to a z-coordinate or parameter.\n   * \n   * @returns {number|null|undefined}\n   */\n  getValue () {\n    if (this._param && this._axesSubset.z.coord !== undefined) {\n      let val = this.range.get({z: this._axesSubset.z.idx})\n      return val\n    }    \n  }\n  \n  /**\n   * Return the displayed value if within the given distance of the reference point.\n   * If out of bounds, then undefined is returned, otherwise a number or null (for no data).\n   * \n   * @param {L.LatLng} latlng\n   * @param {number} maxDistance Maximum distance in meters between both points.\n   * @returns {number|null|undefined}\n   */\n  getValueAt (latlng, maxDistance) {\n    let point = this.getLatLng()\n    if (point.distanceTo(latlng) <= maxDistance) {\n      return this.getValue()\n    }\n  }\n  \n  _getColor (val) {\n    if (val === null) {\n      // no-data\n      return this._defaultColor\n    } else if (val === undefined) {\n      // not fixed to a param or z-coordinate\n      return this._defaultColor\n    } else {\n      // use a palette\n      let idx = this.getPaletteIndex(val)\n      let {red, green, blue} = this.palette\n      return {r: red[idx], g: green[idx], b: blue[idx]}\n    }\n  }\n}\n","import {PointCollection} from './PointCollection.js'\nimport {VerticalProfile} from './VerticalProfile.js'\n\n/**\n * A collection of vertical profiles sharing the same parameters and coordinate referencing system.\n * \n * @see https://covjson.org/domain-types/#verticalprofile\n * \n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\n * @emits {DataLayer#error} Error when loading data\n * @emits {PaletteMixin#paletteChange} Palette has changed\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\n * @emits {Point#click} when the point was clicked\n */\nexport class VerticalProfileCollection extends PointCollection {\n\n  /**\n   * @param {CoverageCollection} covcoll The coverage collection to visualize.\n   * @param {Object} [options] The options object.\n   * @param {string} [options.parameter] The key of the parameter to display.\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full', 'fov', or specific: [-10,10].\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.  \n   */\n  constructor (covcoll, options) {\n    options.pointClass = VerticalProfile\n    super(covcoll, options)\n    // has to be after super() as it references 'this'    \n    options.pointOptionsFn = () => ({\n      vertical: this._vertical\n    })\n    \n    this._vertical = options.vertical\n  }\n  \n  /**\n   * Sets the currently active vertical coordinate for all vertical profiles to the one closest to the given value.\n   * \n   * @type {number|undefined}\n   */\n  set vertical (val) {\n    this._vertical = val\n    for (let layer of this._layers) {\n      layer.vertical = val\n    }\n  }\n  \n  /**\n   * See {@link PaletteMixin}.\n   * \n   * @ignore\n   */\n  canUsePalette () {\n    return this._vertical !== undefined\n  }\n}\n","import L from 'leaflet'\r\nimport {isDomain, fromDomain, minMaxOfRange, ensureClockwisePolygon, getPointInPolygonsFn} from 'covutils'\r\n\r\nimport {enlargeExtentIfEqual} from './palettes.js'\r\nimport {PaletteMixin} from './PaletteMixin.js'\r\nimport {CoverageMixin} from './CoverageMixin.js'\r\nimport {EventMixin} from '../util/EventMixin.js'\r\n  \r\n/** @ignore */\r\nexport const DEFAULT_COLOR = 'black'\r\n\r\n/**\r\n * The `click` event, signalling that a polygon has been clicked.\r\n * \r\n * @typedef {L.MouseEvent} MultiPolygon#click\r\n * @property {number} index The axis index of the polygon that was clicked.\r\n * @property {L.LatLng} latlng The geographical point where the click event occured.\r\n */\r\n\r\n/**\r\n * Renderer for Coverages and Domains conforming to CovJSON domain type `MultiPolygon`.\r\n *\r\n * @example\r\n * var cov = ... // get Coverage data\r\n * var layer = new C.MultiPolygon(cov, {\r\n *   parameter: 'salinity',\r\n *   defaultColor: 'black',\r\n *   palette: C.linearPalette(['#FFFFFF', '#000000'])\r\n * })\r\n * \r\n * @see https://covjson.org/domain-types/#multipolygon\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#dataLoading} Data loading has started\r\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * @emits {MultiPolygon#click} when a polygon was clicked\r\n * \r\n * @extends {L.Layer}\r\n * @extends {CoverageMixin}\r\n * @extends {PaletteMixin}\r\n * @implements {DataLayer}\r\n */\r\nexport class MultiPolygon extends PaletteMixin(CoverageMixin(L.Layer)) {\r\n  \r\n  /**\r\n   * The key of the parameter to display can be given in the 'parameter' options property,\r\n   * it will be ignored if the coverage data object is a Domain object.\r\n   * \r\n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full' or specific: [-10,10].\r\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\r\n   */\r\n  constructor (cov, options) {\r\n    super()\r\n    \r\n    if (isDomain(cov)) {\r\n      cov = fromDomain(cov)\r\n      options.parameter = cov.parameters.keys().next().value\r\n      delete options.keys\r\n    }\r\n    \r\n    if (!options.paletteExtent) {\r\n      options.paletteExtent = 'full'\r\n    }\r\n    \r\n    L.Util.setOptions(this, options)\r\n    \r\n    this._cov = cov\r\n    let paramKey = options.keys ? options.keys[0] : options.parameter\r\n    this._param = paramKey ? cov.parameters.get(paramKey) : null\r\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n    \r\n    this.load()\r\n      .then(() => this.initializePalette())\r\n      .then(() => {\r\n        this._unproject()\r\n        this._addPolygons()\r\n        this._pointInPolygonPreprocess()\r\n        this.fire('afterAdd')\r\n    })\r\n  }\r\n  \r\n  _unproject () {\r\n    let unproject = this.projection.unproject\r\n    let axis = this.domain.axes.get('composite')\r\n    let ix = axis.coordinates.indexOf(this._projX)\r\n    let iy = axis.coordinates.indexOf(this._projY)\r\n\r\n    this._polygonsLonLat = axis.values.map(polygon => polygon.map(ring => ring.map(coords => {\r\n      let {lat,lon} = unproject({x: coords[ix], y: coords[iy]})\r\n      return [lon,lat]\r\n    })))\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onRemove (map) {\r\n    this._removePolygons()\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Returns the geographic bounds of the coverage.\r\n   * \r\n   * @return {L.LatLngBounds}\r\n   */\r\n  getBounds () {\r\n    return this._geojson.getBounds()\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographical center position of the coverage based on its bounding box.\r\n   * \r\n   * @return {L.LatLng}\r\n   */\r\n  getLatLng () {\r\n    return this.getBounds().getCenter()\r\n  }\r\n  \r\n\r\n  /**\r\n   * The coverage object associated to this layer.\r\n   * \r\n   * @type {Coverage}\r\n   */\r\n  get coverage () {\r\n    return this._cov\r\n  }\r\n  \r\n  /**\r\n   * The parameter that is visualized.\r\n   * \r\n   * @type {Parameter}\r\n   */\r\n  get parameter () {\r\n    return this._param\r\n  }\r\n      \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  computePaletteExtent (extent) {\r\n    if (extent === 'full') {\r\n      if (!this.parameter) {\r\n        throw new Error('palette extent cannot be computed when no parameter has been chosen')\r\n      }\r\n    \r\n      extent = minMaxOfRange(this.range)\r\n      extent = enlargeExtentIfEqual(extent)\r\n      return Promise.resolve(extent)\r\n    } else {\r\n      throw new Error('Unknown extent specification: ' + extent)\r\n    }\r\n  }\r\n  \r\n  _pointInPolygonPreprocess () {\r\n    let polygons = this._polygonsLonLat\r\n    // TODO we assume spherical coordinates for now\r\n    let isCartesian = false\r\n    // A bit evil since this modifies in-place, but nothing bad should happen.\r\n    polygons.forEach(p => ensureClockwisePolygon(p, isCartesian))\r\n    this._pointInPolygons = getPointInPolygonsFn(polygons)\r\n  }\r\n  \r\n  _addPolygons () {\r\n    let polygons = this._polygonsLonLat\r\n    \r\n    let geojson = []\r\n    for (let i=0; i < polygons.length; i++) {\r\n      geojson.push({\r\n        \"type\": \"Feature\",\r\n        \"properties\": {\r\n          \"index\": i,\r\n          \"color\": this._getColor(this._getValue(i))\r\n        },\r\n        \"geometry\": {\r\n          \"type\": \"Polygon\",\r\n          \"coordinates\": polygons[i]\r\n        }\r\n      })\r\n    }\r\n    \r\n    this._geojson = L.geoJson(geojson, {\r\n      style: feature => ({\r\n        color: feature.properties.color,\r\n        fillOpacity: 1,\r\n        stroke: false\r\n      }),\r\n      onEachFeature: (feature, layer) => {\r\n        layer.on('click', e => {\r\n          e.index = feature.properties.index\r\n          this.fire('click', e)\r\n        })\r\n      }\r\n    })\r\n    \r\n    this._geojson.addTo(this._map)\r\n  }\r\n  \r\n  _removePolygons () {\r\n    this._map.removeLayer(this._geojson)\r\n    delete this._geojson\r\n  }\r\n  \r\n  _getValue (index) {\r\n    if (this._param) {\r\n      return this.range.get({composite: index})\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value at a given geographic position.\r\n   * If out of bounds, then undefined is returned, otherwise a number or null (for no data).\r\n   * \r\n   * @param {L.LatLng} latlng\r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValueAt (latlng) {\r\n    // TODO longitude wrapping\r\n    let i = this._pointInPolygons([latlng.lng, latlng.lat])\r\n    if (i >= 0) {\r\n      return this._getValue(i)\r\n    }    \r\n  }\r\n  \r\n  // NOTE: this returns a string, not an {r,g,b} object as in other classes!\r\n  _getColor (val) {\r\n    if (val === null) {\r\n      // no-data\r\n      return this._defaultColor\r\n    } else if (val === undefined) {\r\n      // not fixed to a param\r\n      return this._defaultColor\r\n    } else {\r\n      // use a palette\r\n      let idx = this.getPaletteIndex(val)\r\n      let {red, green, blue} = this.palette\r\n      return `rgb(${red[idx]}, ${green[idx]}, ${blue[idx]})`\r\n    }\r\n  }\r\n  \r\n  _updatePolygons () {\r\n    this._removePolygons()\r\n    this._addPolygons()\r\n  }\r\n  \r\n  /**\r\n   * Redraw the layer.\r\n   */\r\n  redraw () {\r\n    this._updatePolygons()\r\n    this._geojson.redraw()\r\n  }\r\n  \r\n}\r\n","import L from 'leaflet'\r\nimport {indexOfNearest, minMaxOfRange, isDomain, fromDomain, ensureClockwisePolygon, getPointInPolygonsFn} from 'covutils'\r\n\r\nimport {enlargeExtentIfEqual} from './palettes.js'\r\nimport {CoverageMixin} from './CoverageMixin.js'\r\nimport {EventMixin} from '../util/EventMixin.js'\r\nimport {PaletteMixin} from './PaletteMixin.js'\r\n\r\nimport {DEFAULT_COLOR} from './Point.js'\r\n\r\n// TODO nearly identical to VerticalProfile\r\n\r\n/**\r\n * Renderer for Coverages conforming to the CovJSON domain type `PolygonSeries`.\r\n * \r\n * @example\r\n * var cov = ... // get Coverage data\r\n * var layer = new C.PolygonSeries(cov, {\r\n *   parameter: 'salinity',\r\n *   time: new Date('2015-01-01T12:00:00Z'),\r\n *   defaultColor: 'black',\r\n *   palette: C.linearPalette(['#FFFFFF', '#000000'])\r\n * })\r\n * \r\n * @see https://covjson.org/domain-types/#polygonseries\r\n * \r\n * @emits {DataLayer#afterAdd} Layer is initialized and was added to the map\r\n * @emits {DataLayer#dataLoading} Data loading has started\r\n * @emits {DataLayer#dataLoad} Data loading has finished (also in case of errors)\r\n * @emits {DataLayer#error} Error when loading data\r\n * @emits {DataLayer#axisChange} Axis coordinate has changed (e.axis === 'time')\r\n * @emits {PaletteMixin#paletteChange} Palette has changed\r\n * @emits {PaletteMixin#paletteExtentChange} Palette extent has changed\r\n * @emits {Point#click} when the polygon was clicked\r\n * \r\n * @extends {L.Layer}\r\n * @extends {CoverageMixin}\r\n * @extends {PaletteMixin}\r\n * @implements {DataLayer}\r\n */\r\nexport class PolygonSeries extends PaletteMixin(CoverageMixin(L.Layer)) {\r\n  \r\n  /**\r\n   * An optional time axis target value can be defined with the 'time' property.\r\n   * The closest values on the time axis is chosen.\r\n   * \r\n   * @param {Coverage|Domain} cov The coverage or domain object to visualize.\r\n   * @param {Object} [options] The options object.\r\n   * @param {string} [options.parameter] The key of the parameter to display, not needed for domain objects.\r\n   * @param {Date} [options.time] The initial time step to display.\r\n   * @param {Palette} [options.palette] The initial color palette to use, the default depends on the parameter type.\r\n   * @param {string} [options.paletteExtent='full'] The initial palette extent, either 'full' or specific: [-10,10].\r\n   * @param {string} [options.defaultColor='black'] The color to use for missing data or if no parameter is set.\r\n   */\r\n  constructor (cov, options) {\r\n    super()\r\n    \r\n    if (isDomain(cov)) {\r\n      cov = fromDomain(cov)\r\n      delete options.keys\r\n      options.parameter = cov.parameters.keys().next().value\r\n    }\r\n    \r\n    if (!options.paletteExtent) {\r\n      options.paletteExtent = 'full'\r\n    }\r\n    \r\n    L.Util.setOptions(this, options)\r\n\r\n    this._cov = cov\r\n    let paramKey = options.keys ? options.keys[0] : options.parameter\r\n    this._param = paramKey ? cov.parameters.get(paramKey) : null\r\n    this._axesSubset = {\r\n      t: {coordPref: options.time}\r\n    }\r\n    this._defaultColor = options.defaultColor || DEFAULT_COLOR\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onAdd (map) {\r\n    this._map = map\r\n\r\n    this.load()\r\n      .then(() => this.initializePalette())\r\n      .then(() => {\r\n        this._unproject()\r\n        this._addPolygon()\r\n        this._pointInPolygonPreprocess()\r\n        this.fire('afterAdd')\r\n      })\r\n  }\r\n  \r\n  _unproject () {\r\n    let unproject = this.projection.unproject\r\n    let axis = this.domain.axes.get('composite')\r\n    let ix = axis.coordinates.indexOf(this._projX)\r\n    let iy = axis.coordinates.indexOf(this._projY)\r\n    \r\n    this._polygonLonLat = axis.values[0].map(ring => ring.map(coords => {\r\n      let {lat,lon} = unproject({x: coords[ix], y: coords[iy]})\r\n      return [lon,lat]\r\n    }))\r\n  }\r\n    \r\n  _loadCoverageSubset () {\r\n    // adapted from Grid.js\r\n    let t = this._axesSubset.t\r\n    if (t.coordPref == undefined) {\r\n      t.idx = t.coord = undefined\r\n    } else {\r\n      let vals = this.domain.axes.get('t').values.map(v => v.getTime())\r\n      t.idx = indexOfNearest(vals, t.coordPref.getTime())\r\n      t.coord = vals[t.idx]\r\n    }\r\n    \r\n    // Note that we don't subset the coverage currently, since there is no real need for it\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  onRemove () {\r\n    this._removePolygon()\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographic bounds of the coverage.\r\n   * \r\n   * @return {L.LatLngBounds}\r\n   */\r\n  getBounds () {\r\n    return this._geojson.getBounds()\r\n  }\r\n  \r\n  /**\r\n   * Returns the geographical center position of the coverage based on its bounding box.\r\n   * \r\n   * @return {L.LatLng}\r\n   */\r\n  getLatLng () {\r\n    return this.getBounds().getCenter()\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  bindPopup (...args) {\r\n    this._popup = args\r\n    if (this._geojson) {\r\n      this._geojson.bindPopup(...args)\r\n    }\r\n    return this\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  openPopup () {\r\n    this._geojson.openPopup()\r\n    return this\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   * @override\r\n   */\r\n  closePopup () {\r\n    this._geojson.closePopup()\r\n    return this\r\n  }\r\n  \r\n  /**\r\n   * The coverage object associated to this layer.\r\n   * \r\n   * @type {Coverage}\r\n   */\r\n  get coverage () {\r\n    return this._cov\r\n  }\r\n    \r\n  /**\r\n   * The parameter that is visualized.\r\n   * \r\n   * @type {Parameter}\r\n   */\r\n  get parameter () {\r\n    return this._param\r\n  }\r\n  \r\n  /**\r\n   * Sets the currently active time to the one closest to the given Date object.\r\n   * \r\n   * @type {Date|undefined}\r\n   */\r\n  set time (val) {\r\n    let old = this.time\r\n    this._axesSubset.t.coordPref = val ? val.toISOString() : undefined\r\n    \r\n    this._loadCoverageSubset()\r\n    if (old === this.time) return\r\n    this.redraw()\r\n    this.fire('axisChange', {axis: 'time'})\r\n  }\r\n  \r\n  /**\r\n   * The currently active time on the temporal axis as Date object, \r\n   * or undefined if no time is set.\r\n   * \r\n   * @type {Date|undefined}\r\n   */\r\n  get time () {\r\n    if (!this._axesSubset.t.coord) {\r\n      return\r\n    }\r\n    let time = this.domain.axes.get('t').values[this._axesSubset.t.idx]\r\n    return new Date(time)\r\n  }\r\n  \r\n  /**\r\n   * The time slices that make up the coverage.\r\n   * \r\n   * @type {Array<Date>}\r\n   */\r\n  get timeSlices () {\r\n    return this.domain.axes.get('t').values.map(t => new Date(t))\r\n  }\r\n    \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  canUsePalette () {\r\n    return this.time !== undefined\r\n  }\r\n    \r\n  /**\r\n   * See {@link PaletteMixin}.\r\n   * \r\n   * @ignore\r\n   */\r\n  computePaletteExtent (extent) {\r\n    if (extent === 'full') {\r\n      if (!this.parameter) {\r\n        throw new Error('palette extent cannot be computed when no parameter has been chosen')\r\n      }\r\n    \r\n      extent = minMaxOfRange(this.range)\r\n      extent = enlargeExtentIfEqual(extent)\r\n      return Promise.resolve(extent)\r\n    } else {\r\n      throw new Error('Unknown extent specification: ' + extent)\r\n    }\r\n  }\r\n  \r\n  _pointInPolygonPreprocess () {\r\n    let polygon = this._polygonLonLat\r\n    // TODO we assume spherical coordinates for now\r\n    let isCartesian = false\r\n    // A bit evil since this modifies in-place, but nothing bad should happen.\r\n    ensureClockwisePolygon(polygon, isCartesian)\r\n    let pointInPolygons = getPointInPolygonsFn([polygon])\r\n    this._pointInPolygon = point => pointInPolygons(point) !== -1\r\n  }\r\n  \r\n  _addPolygon () {\r\n    let polygon = this._polygonLonLat\r\n    \r\n    let geojson = {\r\n      \"type\": \"Feature\",\r\n      \"properties\": {\r\n        \"color\": this._getColor(this.getValue())\r\n      },\r\n      \"geometry\": {\r\n        \"type\": \"Polygon\",\r\n        \"coordinates\": polygon\r\n      }\r\n    }\r\n    \r\n    this._geojson = L.geoJson(geojson, {\r\n      style: feature => ({\r\n        color: feature.properties.color,\r\n        fillOpacity: 1,\r\n        stroke: false\r\n      }),\r\n      onEachFeature: (feature, layer) => {\r\n        layer.on('click', e => this.fire('click', e))\r\n      }\r\n    })\r\n    \r\n    if (this._popup) {\r\n      this._geojson.bindPopup(...this._popup)\r\n    }\r\n    \r\n    this._geojson.addTo(this._map)\r\n  }\r\n  \r\n  _removePolygon () {\r\n    this._map.removeLayer(this._geojson)\r\n    delete this._geojson\r\n  }\r\n    \r\n  /**\r\n   * Return the displayed value (number, or null for no-data),\r\n   * or undefined if not fixed to a t-coordinate or parameter.\r\n   * \r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValue () {\r\n    if (this._param && this._axesSubset.t.coord !== undefined) {\r\n      let val = this.range.get({t: this._axesSubset.t.idx})\r\n      return val\r\n    }    \r\n  }\r\n  \r\n  /**\r\n   * Return the displayed value at a given geographic position.\r\n   * If out of bounds, then undefined is returned, otherwise a number or null (for no data).\r\n   * \r\n   * @param {L.LatLng} latlng\r\n   * @returns {number|null|undefined}\r\n   */\r\n  getValueAt (latlng) {\r\n    if (!latlng) throw new Error('latlng parameter missing')\r\n    \r\n    // TODO longitude wrapping\r\n    if (this._pointInPolygon([latlng.lng, latlng.lat])) {\r\n      return this.getValue()\r\n    }   \r\n  }\r\n  \r\n  // NOTE: this returns a string, not an {r,g,b} object as in other classes!\r\n  _getColor (val) {\r\n    if (val === null) {\r\n      // no-data\r\n      return this._defaultColor\r\n    } else if (val === undefined) {\r\n      // not fixed to a param or z-coordinate\r\n      return this._defaultColor\r\n    } else {\r\n      // use a palette\r\n      let idx = this.getPaletteIndex(val)\r\n      let {red, green, blue} = this.palette\r\n      return `rgb(${red[idx]}, ${green[idx]}, ${blue[idx]})`\r\n    }\r\n  }\r\n  \r\n  _updatePolygon () {\r\n    this._removePolygon()\r\n    this._addPolygon()\r\n  }\r\n  \r\n  /**\r\n   * Redraw the layer.\r\n   */\r\n  redraw () {\r\n    this._updatePolygon()\r\n    this._geojson.redraw()\r\n  }\r\n}\r\n","const COVJSON_PREFIX = 'https://covjson.org/def/'\nconst COVJSON_CORE_NS = COVJSON_PREFIX + 'core#'\nconst COVJSON_DOMAINTYPES_NS = COVJSON_PREFIX + 'domainTypes#'\n/** @ignore */\nexport const COVJSON_POINT = COVJSON_DOMAINTYPES_NS + 'Point'\n/** @ignore */\nexport const COVJSON_POINTSERIES = COVJSON_DOMAINTYPES_NS + 'PointSeries'\n/** @ignore */\nexport const COVJSON_VERTICALPROFILE = COVJSON_DOMAINTYPES_NS + 'VerticalProfile'\n/** @ignore */\nexport const COVJSON_GRID = COVJSON_DOMAINTYPES_NS + 'Grid'\n/** @ignore */\nexport const COVJSON_TRAJECTORY = COVJSON_DOMAINTYPES_NS + 'Trajectory'\n/** @ignore */\nexport const COVJSON_POLYGONSERIES = COVJSON_DOMAINTYPES_NS + 'PolygonSeries'\n/** @ignore */\nexport const COVJSON_MULTIPOLYGON = COVJSON_DOMAINTYPES_NS + 'MultiPolygon'\n\n/** @ignore */\nexport const COVJSON_DATATYPE_TUPLE = COVJSON_CORE_NS + 'tuple'\n/** @ignore */\nexport const COVJSON_DATATYPE_POLYGON = COVJSON_CORE_NS + 'polygon'\n\n// JS API object types\nexport {COVERAGE, COVERAGECOLLECTION, DOMAIN} from 'covutils'","import {Grid} from './Grid.js'\nimport {Trajectory} from './Trajectory.js'\nimport {Point} from './Point.js'\nimport {PointSeries} from './PointSeries.js'\nimport {PointCollection} from './PointCollection.js'\nimport {VerticalProfile} from './VerticalProfile.js'\nimport {VerticalProfileCollection} from './VerticalProfileCollection.js'\nimport {MultiPolygon} from './MultiPolygon.js'\nimport {PolygonSeries} from './PolygonSeries.js'\nimport {\n  COVJSON_POINT, \n  COVJSON_POINTSERIES, \n  COVJSON_VERTICALPROFILE, \n  COVJSON_GRID, \n  COVJSON_TRAJECTORY, \n  COVJSON_MULTIPOLYGON,\n  COVJSON_POLYGONSERIES,\n  COVERAGE,\n  COVERAGECOLLECTION,\n  DOMAIN\n  } from '../util/constants.js'\n\nconst DOMAIN_LAYER_CLASSES = {\n  [COVJSON_GRID]: Grid,\n  [COVJSON_POINT]: Point,\n  [COVJSON_POINTSERIES]: PointSeries,\n  [COVJSON_VERTICALPROFILE]: VerticalProfile,\n  [COVJSON_TRAJECTORY]: Trajectory,\n  [COVJSON_MULTIPOLYGON]: MultiPolygon,\n  [COVJSON_POLYGONSERIES]: PolygonSeries\n}\n  \nconst COLLECTION_LAYER_CLASSES = {\n  [COVJSON_POINT]: PointCollection,\n  [COVJSON_VERTICALPROFILE]: VerticalProfileCollection \n}\n\n/**\n * Creates a layer for a given coverage data object or throws an error if no layer class could be found.\n * \n * This is a convenience function over using {@link dataLayerClass} and manually\n * instantiating the layer.\n * \n * @example\n * var cov = ...\n * var layer = C.dataLayer(cov, {parameter: 'temperature'}).addTo(map)\n *  \n * @return {function} A function fn(cov, options) which returns a new layer for\n *   the given coverage data object and which is initialized with the given layer options.\n * @throws {Error} If no layer class could be found.\n */\nexport function dataLayer (cov, options) {\n  let clazz = dataLayerClass(cov)\n  if (!clazz) {\n    let coll = cov.type === COVERAGECOLLECTION ? 'collection ' : ''\n    throw new Error(`No ${coll}layer class found for domainType=${cov.domainType}`)\n  }\n  return new clazz(cov, options)\n}\n\n/**\n * Return a layer class usable for the given coverage data object,\n * or `undefined` if none was found.\n * If multiple layers match, then an arbitrary one is returned.\n *  \n * @example\n * var cov = ...\n * var clazz = C.dataLayerClass(cov)\n * if (clazz) {\n *   var layer = new clazz(cov, {parameter: 'temperature'}).addTo(map)\n * }\n * \n * @param {object} cov The coverage data object.\n * @return {class|undefined} The layer class.\n */\nexport function dataLayerClass (cov) {\n  if ((cov.type === COVERAGE || cov.type === DOMAIN ) && cov.domainType in DOMAIN_LAYER_CLASSES) {\n    return DOMAIN_LAYER_CLASSES[cov.domainType]\n  }\n  if (cov.type === COVERAGECOLLECTION && cov.domainType in COLLECTION_LAYER_CLASSES) {\n    return COLLECTION_LAYER_CLASSES[cov.domainType]\n  }\n}\n","import L from 'leaflet'\n\nimport {EventMixin} from '../util/EventMixin.js'\n\n/**\n * Default function that checks if two Parameter objects describe\n * the same thing. No magic is applied here. Exact match or nothing.\n */\nfunction defaultMatch (p1, p2) {\n  if (p1.id && p2.id && p1.id === p2.id) {\n    return true\n  }\n  if (!p1.observedProperty.id || !p2.observedProperty.id) {\n    return false\n  }\n  if (p1.observedProperty.id !== p2.observedProperty.id) {\n    return false\n  }\n  if (p1.unit && p2.unit) {\n    if (p1.unit.id && p2.unit.id && p1.unit.id !== p2.unit.id) {\n      return false\n    }\n    if (p1.unit.symbol && p2.unit.symbol && p1.unit.symbol !== p2.unit.symbol) {\n      return false\n    }\n  } else if (p1.unit || p2.unit) { // only one of both has units\n    return false\n  }\n  if (p1.categories && p2.categories) {\n    if (p1.categories.length !== p2.categories.length) {\n      return false\n    }\n    let idMissing = cat => !cat.id\n    if (p1.categories.some(idMissing) || p2.categories.some(idMissing)) {\n      return false\n    }\n    for (let cat1 of p1.categories) {\n      if (!p2.categories.some(cat2 => cat1.id === cat2.id)) {\n        return false\n      }\n    }\n  } else if (p1.categories || p2.categories) { // only one of both has categories\n    return false\n  }\n  return true\n}\n\n/**\n * Synchronizes visualization options of multiple renderer layers with matching Parameter\n * and exposes a combined view of those options in form of a virtual layer object.\n * \n * A common use case for this is to have equal palettes and only a single legend\n * for multiple layers describing the same parameter.\n * \n * Synchronizing visualization options means synchronizing certain common properties\n * of the layer instances. For example, the palette extents of two layers can be\n * synchronized by merging the extents of both. The logic for doing that has to\n * be specified in terms of binary functions supplied in the constructor.\n * \n * By default, a simple algorithm determines if two Parameter objects are equivalent\n * by checking whether things like observedPropery have the same ID, units are the same,\n * etc. This default algorithm can be replaced with a custom one. Such a custom\n * algorithm could relate different vocabularies with each other or perform other checks.\n * \n * @example\n * let paramSync = new C.ParameterSync({\n *   syncProperties: {\n *     palette: (p1, p2) => p1,\n *     paletteExtent: (e1, e2) => e1 && e2 ? [Math.min(e1[0], e2[0]), Math.max(e1[1], e2[1])] : null\n *   }\n * }).on('parameterAdd', e => {\n *   // The virtual sync layer proxies the synced palette, paletteExtent, and parameter.\n *   // The sync layer will fire a 'remove' event once all real layers for that parameter were removed.\n *   let layer = e.syncLayer\n *   if (layer.palette) {\n *     C.legend(layer, {\n *       position: 'bottomright'\n *     }).addTo(map)\n *   }\n * })\n * let layer = C.layerFactory()(cov).on('add', e => {\n *   // Only add the layer to the ParameterSync instance once it has initialized.\n *   // We can use the 'add' event for that.\n *   paramSync.addLayer(e.target)\n * })\n */\nexport class ParameterSync extends EventMixin(L.Class) {\n  \n  /**\n   * @param {Object} options\n   * @param {Object} options.syncProperties - \n   *   An object that defines which properties shall be synchronized and how.\n   *   Each key is a property name where the value is a binary function that merges\n   *   the values of two such properties.\n   * @param {Function} [options.match] - \n   *   Custom function that checks if two Parameter objects shall be equivalent.\n   *   The default function is simple and checks for identity of several properties.\n   */\n  constructor (options) {\n    super()\n    this._syncProps = options.syncProperties || {}\n    this._match = options.match || defaultMatch\n    this._paramLayers = new Map() // Map (Parameter -> Set(Layer))\n    this._layerListeners = new Map() // Map (Layer -> Map(type -> listener))\n    this._propSyncing = new Set() // Set (property name) \n  }\n  \n  /**\n   * Adds a layer that will be synchronized.\n   * \n   * Synchronization stops automatically when the layer fires a 'remove' event.\n   * \n   * @param {ILayer} layer - The layer to synchronize.\n   * @fires ParameterSync#parameterAdd - When a layer with a new parameter was added.\n   */\n  addLayer (layer) {\n    if (!layer.parameter) {\n      console.log('layer has no parameter, skipping parameter sync')\n      return   \n    }\n    let params = Array.from(this._paramLayers.keys())\n    let match = params.find(p => this._match(p, layer.parameter))\n    \n    let param\n    if (!match) {\n      param = layer.parameter\n      this._paramLayers.set(param, new Set([layer]))\n    } else {\n      param = match\n      this._paramLayers.get(param).add(layer)\n      this._syncProperties(param)\n    }\n    \n    this._registerLayerListeners(layer, param)\n    \n    if (!match) {\n      /**\n       * Parameter Add event.\n       * \n       * @event ParameterSync#parameterAdd\n       * @type {object}\n       * @property {SyncLayer} syncLayer - \n       *   A virtual layer that proxies the synchronized properties for a single parameter.\n       *   If all layers of that parameter are removed, this layer fires a 'remove' event,\n       *   signalling that the parameter is not present anymore.\n       */\n      this.fire('parameterAdd', {syncLayer: new SyncLayer(param, this)})\n    }\n  }\n  /**\n   * Pause synchronization. This is useful when a property of\n   * many layers has to be set manually (like paletteExtent = 'fov') and\n   * the synchronization shall happen afterwards (see resume()).\n   */\n  pause () {\n    this.paused = true\n  }\n  \n  /**\n   * Resumes synchronization.\n   * \n   * @param {bool} [sync] If true, then all layers will be synchronized immediately.\n   */\n  resume (sync) {\n    this.paused = false\n    if (sync) {\n      for (let param of this._paramLayers.keys()) {\n        this._syncProperties(param)\n      }\n    }\n  }\n  \n  _removeLayer (layer, param) {\n    for (let [type, fn] of this._layerListeners.get(layer)) {\n      layer.off(type, fn)\n    }\n    this._layerListeners.delete(layer)\n    this._paramLayers.get(param).delete(layer)\n    if (this._paramLayers.get(param).size === 0) {\n      this._paramLayers.delete(param)\n      // underscore since the 'remove' event of the syncLayer should be used\n      // from the outside\n      this.fire('_parameterRemove', {param: param})\n    }\n  }\n  \n  _registerLayerListeners (layer, param) {\n    let listeners = new Map([\n      ['remove', () => this._removeLayer(layer, param)]\n    ])\n    for (let prop of Object.keys(this._syncProps)) {\n      let type = prop + 'Change' // our convention is camel case\n      // TODO does it make sense to unify again, or should it just propagate unchanged?\n      listeners.set(type, () => this._syncProperty(param, prop))\n    }\n    for (let [type, fn] of listeners) {\n      layer.on(type, fn)\n    }\n    this._layerListeners.set(layer, listeners)\n  }\n  \n  _syncProperties (param) {\n    for (let prop of Object.keys(this._syncProps)) {\n      this._syncProperty(param, prop)\n    }\n  }\n  \n  _syncProperty (param, prop) {\n    if (this.paused || this._propSyncing.has(prop)) {\n      return\n    }\n    let propreduce = this._syncProps[prop]\n    let unified = [...this._paramLayers.get(param)].map(l => l[prop]).reduce(propreduce)\n    // While we unify properties, stop listening for changes to prevent a cycle.\n    this._propSyncing.add(prop)\n    for (let layer_ of this._paramLayers.get(param)) {\n      layer_[prop] = unified\n    }\n    this._propSyncing.delete(prop)\n    this.fire('_syncPropChange', {param: param, prop: prop})\n  }\n}\n\nclass SyncLayer extends EventMixin(L.Class) {\n  constructor (param, paramSync) {\n    super()\n    this._param = param\n    paramSync.on('_parameterRemove', e => {\n      if (e.param === param) {\n        this.fire('remove')\n      }\n    })\n    paramSync.on('_syncPropChange', e => {\n      if (e.param === param) {\n        this.fire(e.prop + 'Change')\n      }\n    })\n    let layers = () => paramSync._paramLayers.get(param)\n    for (let prop of Object.keys(paramSync._syncProps)) {\n      Object.defineProperty(this, prop, {\n        get: () => layers().values().next().value[prop],\n        set: v => {\n          paramSync._propSyncing.add(prop)\n          for (let layer of layers()) {\n            layer[prop] = v\n          }\n          paramSync._propSyncing.delete(prop)\n          this.fire(prop + 'Change')\n        },\n        enumerable: true\n      })\n    }\n  }\n  \n  get parameter () {\n    return this._param\n  }\n}\n","import L from 'leaflet'\r\nimport c3 from 'c3'\r\nimport {getLanguageString, stringifyUnit, getReferenceObject} from 'covutils'\r\n\r\n/**\r\n * Displays a popup with an interactive plot showing the data\r\n * of the vertical profile coverage.\r\n * \r\n * @example\r\n * layer.bindPopup(new C.VerticalProfilePlot(coverage))\r\n */\r\nexport class VerticalProfilePlot extends L.Popup {\r\n  \r\n  /**\r\n   * Creates a vertical profile plot popup.\r\n   * \r\n   * @param {Coverage|Array<Coverage>} coverage The vertical profile coverage to visualize.\r\n   *   If an array of vertical profile coverages is given, then the vertical reference systems\r\n   *   are assumed to be identical.\r\n   * @param {object} [options] Popup options. See also http://leafletjs.com/reference.html#popup-options.\r\n   * @param {Array|Array<Array>} [options.parameters] The parameters to display.\r\n   *   For a single coverage, an array of parameter keys, each parameter is accessible in a drop down.\r\n   *   The default for a single coverage is to display all parameters.\r\n   *   For multiple coverages, an array of parameter key groups, each group is accessible in a drop down.\r\n   *   Each group array is ordered as the coverage array and determines which parameter of each coverage\r\n   *   is displayed in a single plot. In each group, at least one item must be defined.\r\n   *   The default for multiple coverages is to display all parameters and treat each one as a separate group.\r\n   * @param {string} [options.language] A language tag, indicating the preferred language to use for labels.\r\n   * @param {string} [options.precision=4] The number of significant digits to display.\r\n   */\r\n  constructor (coverage, options = {}) {\r\n    options.maxWidth = options.maxWidth || 350\r\n    super(options)\r\n    this._covs = Array.isArray(coverage) ? coverage : [coverage]\r\n    this._language = options.language\r\n    this._precision = options.precision || 4\r\n    \r\n    this._labels = options.labels ? options.labels : new Array(this._covs.length)\r\n    \r\n    if (options.parameters) {\r\n      options.parameters = options.keys\r\n    }\r\n\r\n    let keyGroups = []\r\n    if (!options.keys) {\r\n      // treat all parameters of all coverages as separate\r\n      for (let i=0; i < this._covs.length; i++) {\r\n        for (let key of this._covs[i].parameters.keys()) {\r\n          let group = new Array(this._covs.length)\r\n          group[i] = key\r\n          keyGroups.push(group)\r\n        }        \r\n      }\r\n    } else if (!Array.isArray(options.keys[0])) {\r\n      // short-cut for a single coverage, acts as parameter selector\r\n      keyGroups = options.keys.map(key => [key])\r\n    } else {\r\n      // user defines which parameters to display and how to group them\r\n      keyGroups = options.keys\r\n    }\r\n    \r\n    // filter out groups which only contain null/undefined keys\r\n    keyGroups = keyGroups.filter(group => !group.every(key => !key))\r\n    \r\n    if (keyGroups.some(group => group.length !== this._covs.length)) {\r\n      throw new Error('Length of each parameter group must match number of coverages')\r\n    }\r\n    \r\n    // 2D array of parameter key groups, where each inner array is ordered like the coverages array\r\n    this._paramKeyGroups = keyGroups\r\n    \r\n    // Map from coverage to param keys\r\n    this._paramKeys = new Map()\r\n    for (let i=0; i < this._covs.length; i++) {\r\n      let keys = this._paramKeyGroups.map(group => group[i]).filter(key => key)\r\n      this._paramKeys.set(this._covs[i], keys)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @ignore\r\n   */\r\n  onAdd (map) {\r\n    super.onAdd(map)\r\n    map.fire('dataloading')\r\n    let domainPromise = Promise.all(this._covs.map(cov => cov.loadDomain()))\r\n    let rangePromise = Promise.all(this._covs.map(cov => cov.loadRanges(this._paramKeys.get(cov))))\r\n    Promise.all([domainPromise, rangePromise]).then(([domains, ranges]) => {\r\n      this._domains = domains\r\n      this._ranges = ranges\r\n      this._addPlotToPopup()\r\n      this.fire('dataLoad')\r\n      this.fire('afterAdd')\r\n      map.fire('dataload')\r\n    }).catch(e => {\r\n      console.error(e)\r\n      this.fire('error', e)      \r\n      map.fire('dataload')\r\n    })\r\n  }\r\n  \r\n  _addPlotToPopup () {    \r\n    // display first parameter group\r\n    let paramKeyGroup = this._paramKeyGroups[0]    \r\n    let plot = this._getPlotElement(paramKeyGroup)\r\n    \r\n    let el = document.createElement('div')\r\n    \r\n    // display dropdown if multiple parameter groups\r\n    if (this._paramKeyGroups.length > 1) {\r\n      let select = document.createElement('select')\r\n      \r\n      for (let [paramKeyGroup,i] of this._paramKeyGroups.map((v,i) => [v,i])) {\r\n        let refParam = this._getRefParam(paramKeyGroup)\r\n        let option = document.createElement('option')\r\n        option.value = i\r\n        option.text = getLanguageString(refParam.observedProperty.label, this._language)\r\n        select.appendChild(option)\r\n      }\r\n      \r\n      select.addEventListener('change', () => {\r\n        el.removeChild(plot)\r\n        let group = this._paramKeyGroups[parseInt(select.value)]\r\n        plot = this._getPlotElement(group)\r\n        el.appendChild(plot)\r\n      })\r\n      \r\n      el.appendChild(select)\r\n    }\r\n    \r\n    el.appendChild(plot)\r\n    this.setContent(el)\r\n  }\r\n  \r\n  _getRefParam (paramKeyGroup) {\r\n    // use first defined parameter as representative for the group\r\n    let covsWithParamKey = zip(this._covs, paramKeyGroup)\r\n    let [refCov, refParamKey] = covsWithParamKey.filter(([,key]) => key)[0]\r\n    let refParam = refCov.parameters.get(refParamKey)\r\n    return refParam\r\n  }\r\n  \r\n  _getPlotElement (paramKeyGroup) {    \r\n    let refDomain = this._domains[0]\r\n    let covsWithParamKey = zip(this._covs, paramKeyGroup)\r\n    \r\n    let refParam = this._getRefParam(paramKeyGroup)\r\n    \r\n    // axis labels\r\n    let zName = 'Vertical'\r\n    let zUnit = ''\r\n    \r\n    let vertRef = getReferenceObject(refDomain, 'z')\r\n    if (vertRef && vertRef.coordinates.length === 1) {\r\n      let vertSrs = vertRef.system\r\n      if (vertSrs.cs && (vertSrs.cs.axes || vertSrs.cs.csAxes)) {\r\n        let ax = vertSrs.cs.axes ? vertSrs.cs.axes[0] : vertSrs.cs.csAxes[0]\r\n        zUnit = stringifyUnit(ax.unit, this._language)\r\n        if (ax.name) {\r\n          zName = getLanguageString(ax.name, this._language)\r\n        }\r\n      }\r\n    }\r\n    \r\n    let xLabel = zName\r\n    if (zUnit) {\r\n      xLabel += ' (' + zUnit + ')'\r\n    }\r\n    \r\n    let unit = stringifyUnit(refParam.unit, this._language)\r\n    let obsPropLabel = getLanguageString(refParam.observedProperty.label, this._language)\r\n    \r\n    // http://c3js.org/samples/simple_xy_multiple.html\r\n    \r\n    // axis values\r\n    let xs = {}\r\n    let columns = []\r\n    let names = {}\r\n        \r\n    for (let i=0; i < this._covs.length; i++) {\r\n      let paramKey = covsWithParamKey[i][1]\r\n      if (!paramKey) {\r\n        continue\r\n      }\r\n      \r\n      let xname = 'x' + i\r\n      let yname = refParam.key + i\r\n\r\n      names[yname] = this._labels[i] ? this._labels[i] : obsPropLabel\r\n      \r\n      xs[yname] = xname\r\n      \r\n      let zVals = this._domains[i].axes.get('z').values\r\n      let vals = this._ranges[i].get(paramKey)\r\n      let x = [xname]\r\n      let y = [yname]\r\n      for (let j=0; j < zVals.length; j++) {\r\n        let val = vals.get({z: j})\r\n        if (val === null) {\r\n          continue\r\n        }\r\n        let z = zVals[j]\r\n        x.push(z)\r\n        y.push(val)\r\n      }\r\n      \r\n      columns.push(x)\r\n      columns.push(y)\r\n    }\r\n    \r\n    let width = 350\r\n    let height = 300\r\n    \r\n    let el = document.createElement('div')\r\n    \r\n    // work-around, otherwise popup is too small\r\n    el.style.width = width + 'px'\r\n    el.style.height = height + 'px'\r\n\r\n    c3.generate({\r\n      bindto: el,\r\n      data: {\r\n        xs,\r\n        columns,\r\n        names\r\n      },\r\n      axis: {\r\n        rotated: true,\r\n        x: {\r\n          tick: {\r\n            count: 10,\r\n            format: x => x.toPrecision(this._precision)\r\n          },\r\n          label: {\r\n            text: xLabel,\r\n            position: 'outer-center'\r\n          }\r\n        },\r\n        y: {\r\n          tick: {\r\n            count: 7,\r\n            format: x => x.toPrecision(this._precision)\r\n          },\r\n          label: {\r\n            text: obsPropLabel + (unit ? ' (' + unit + ')' : ''),\r\n            position: 'outer-middle'\r\n          }\r\n        }\r\n      },\r\n      grid: {\r\n        x: {\r\n            show: true\r\n        },\r\n        y: {\r\n            show: true\r\n        }\r\n      },\r\n      legend: {\r\n        show: this._covs.length > 1 ? true : false\r\n      },\r\n      tooltip: {\r\n        format: {\r\n          title: d => zName + ': ' + d.toPrecision(this._precision) + ' ' + zUnit,\r\n          value: (value, ratio, id) => value.toPrecision(this._precision) + ' ' + unit\r\n        }\r\n      },\r\n      zoom: {\r\n        enabled: true,\r\n        rescale: true\r\n      },\r\n      size: {\r\n        height,\r\n        width\r\n      }\r\n    })\r\n    \r\n    return el\r\n  }\r\n}\r\n\r\nfunction zip (a, b) {\r\n  return a.map((e, i) => [a[i], b[i]])\r\n} \r\n","import L from 'leaflet'\nimport c3 from 'c3'\nimport {getLanguageString, stringifyUnit} from 'covutils'\n\n// TODO DRY: nearly identical to VerticalProfilePlot\n\n/**\n * Displays a popup with an interactive plot showing the data\n * of a time series coverage (all axes fixed except time).\n * \n * Examples are VerticalProfile or PointSeries coverages.\n * \n * @example\n * layer.bindPopup(new C.TimeSeriesPlot(coverage))\n */\nexport class TimeSeriesPlot extends L.Popup {\n  \n  /**\n   * Creates a time series plot popup.\n   * \n   * @param {Coverage|Array<Coverage>} coverage The time series coverage to visualize.\n   *   If an array of time series coverages is given, then the reference systems\n   *   are assumed to be identical.\n   * @param {object} [options] Popup options. See also http://leafletjs.com/reference.html#popup-options.\n   * @param {Array|Array<Array>} [options.parameters] The parameters to display.\n   *   For a single coverage, an array of parameter keys, each parameter is accessible in a drop down.\n   *   The default for a single coverage is to display all parameters.\n   *   For multiple coverages, an array of parameter key groups, each group is accessible in a drop down.\n   *   Each group array is ordered as the coverage array and determines which parameter of each coverage\n   *   is displayed in a single plot. In each group, at least one item must be defined.\n   *   The default for multiple coverages is to display all parameters and treat each one as a separate group.\n   * @param {string} [options.language] A language tag, indicating the preferred language to use for labels.\n   * @param {string} [options.precision=4] The number of significant digits to display.\n   */\n  constructor (coverage, options = {}) {\n    options.maxWidth = options.maxWidth || 350\n    super(options)\n    this._covs = Array.isArray(coverage) ? coverage : [coverage]\n    this._language = options.language\n    this._precision = options.precision || 4\n    \n    this._labels = options.labels ? options.labels : new Array(this._covs.length)\n\n    if (options.parameters) {\n      options.parameters = options.keys\n    }\n    \n    let keyGroups = []\n    if (!options.keys) {\n      // treat all parameters of all coverages as separate\n      for (let i=0; i < this._covs.length; i++) {\n        for (let key of this._covs[i].parameters.keys()) {\n          let group = new Array(this._covs.length)\n          group[i] = key\n          keyGroups.push(group)\n        }        \n      }\n    } else if (!Array.isArray(options.keys[0])) {\n      // short-cut for a single coverage, acts as parameter selector\n      keyGroups = options.keys.map(key => [key])\n    } else {\n      // user defines which parameters to display and how to group them\n      keyGroups = options.keys\n    }\n    \n    // filter out groups which only contain null/undefined keys\n    keyGroups = keyGroups.filter(group => !group.every(key => !key))\n    \n    if (keyGroups.some(group => group.length !== this._covs.length)) {\n      throw new Error('Length of each parameter group must match number of coverages')\n    }\n    \n    // 2D array of parameter key groups, where each inner array is ordered like the coverages array\n    this._paramKeyGroups = keyGroups\n    \n    // Map from coverage to param keys\n    this._paramKeys = new Map()\n    for (let i=0; i < this._covs.length; i++) {\n      let keys = this._paramKeyGroups.map(group => group[i]).filter(key => key)\n      this._paramKeys.set(this._covs[i], keys)\n    }\n  }\n  \n  /**\n   * @ignore\n   */\n  onAdd (map) {\n    super.onAdd(map)\n    map.fire('dataloading')\n    let domainPromise = Promise.all(this._covs.map(cov => cov.loadDomain()))\n    let rangePromise = Promise.all(this._covs.map(cov => cov.loadRanges(this._paramKeys.get(cov))))\n    Promise.all([domainPromise, rangePromise]).then(([domains, ranges]) => {\n      this._domains = domains\n      this._ranges = ranges\n      this._addPlotToPopup()\n      this.fire('dataLoad')\n      this.fire('afterAdd')\n      map.fire('dataload')\n    }).catch(e => {\n      console.error(e)\n      this.fire('error', e)      \n      map.fire('dataload')\n    })\n  }\n  \n  _addPlotToPopup () {\n    // display first parameter group\n    let paramKeyGroup = this._paramKeyGroups[0]    \n    let plot = this._getPlotElement(paramKeyGroup)\n    \n    let el = document.createElement('div')\n    \n    // display dropdown if multiple parameter groups\n    if (this._paramKeyGroups.length > 1) {\n      let select = document.createElement('select')\n      \n      for (let [paramKeyGroup,i] of this._paramKeyGroups.map((v,i) => [v,i])) {\n        let refParam = this._getRefParam(paramKeyGroup)\n        let option = document.createElement('option')\n        option.value = i\n        option.text = getLanguageString(refParam.observedProperty.label, this._language)\n        select.appendChild(option)\n      }\n      \n      select.addEventListener('change', () => {\n        el.removeChild(plot)\n        let group = this._paramKeyGroups[parseInt(select.value)]\n        plot = this._getPlotElement(group)\n        el.appendChild(plot)\n      })\n      \n      el.appendChild(select)\n    }\n    \n    el.appendChild(plot)\n    this.setContent(el)\n  }\n  \n  _getRefParam (paramKeyGroup) {\n    // use first defined parameter as representative for the group\n    let covsWithParamKey = zip(this._covs, paramKeyGroup)\n    let [refCov, refParamKey] = covsWithParamKey.filter(([,key]) => key)[0]\n    let refParam = refCov.parameters.get(refParamKey)\n    return refParam\n  }\n  \n  _getPlotElement (paramKeyGroup) {    \n    let refDomain = this._domains[0]\n    let covsWithParamKey = zip(this._covs, paramKeyGroup)\n    \n    let refParam = this._getRefParam(paramKeyGroup)\n    \n    // axis labels\n    let xLabel = 'Time'\n    \n    let unit = stringifyUnit(refParam.unit, this._language)\n    let obsPropLabel = getLanguageString(refParam.observedProperty.label, this._language)\n    \n    // http://c3js.org/samples/simple_xy_multiple.html\n    \n    // axis values\n    let xs = {}\n    let columns = []\n    let names = {}\n        \n    for (let i=0; i < this._covs.length; i++) {\n      let paramKey = covsWithParamKey[i][1]\n      if (!paramKey) {\n        continue\n      }\n      \n      let xname = 'x' + i\n      let yname = refParam.key + i\n\n      names[yname] = this._labels[i] ? this._labels[i] : obsPropLabel\n      \n      xs[yname] = xname\n      \n      let tVals = this._domains[i].axes.get('t').values\n      let vals = this._ranges[i].get(paramKey)\n      let x = [xname]\n      let y = [yname]\n      for (let j=0; j < tVals.length; j++) {\n        let val = vals.get({t: j})\n        if (val === null) {\n          continue\n        }\n        let t = new Date(tVals[j])\n        x.push(t)\n        y.push(val)\n      }\n      \n      columns.push(x)\n      columns.push(y)\n    }\n    \n    let height = 300\n    \n    let el = document.createElement('div')\n    \n    // work-around, otherwise popup is too small\n    el.style.width = this.options.maxWidth + 'px'\n    el.style.height = height + 'px'\n\n    c3.generate({\n      bindto: el,\n      data: {\n        xs,\n        columns,\n        names\n      },\n      axis: {\n        x: {\n          type: 'timeseries',\n          tick: {\n            format: this.options.timeFormat\n          },\n          label: {\n            text: xLabel,\n            position: 'outer-center'\n          }\n        },\n        y: {\n          tick: {\n            count: 7,\n            format: x => x.toPrecision(this._precision)\n          },\n          label: {\n            text: obsPropLabel + (unit ? ' (' + unit + ')' : ''),\n            position: 'outer-middle'\n          }\n        }\n      },\n      grid: {\n        x: {\n            show: true\n        },\n        y: {\n            show: true\n        }\n      },\n      legend: {\n        show: this._covs.length > 1 ? true : false\n      },\n      tooltip: {\n        format: {\n          value: (value, ratio, id) => value.toPrecision(this._precision) + ' ' + unit\n        }\n      },\n      zoom: {\n        enabled: true,\n        rescale: true\n      },\n      size: {\n        height: height,\n        width: this.options.maxWidth\n      }\n    })\n    \n    return el\n  }\n}\n\nfunction zip (a, b) {\n  return a.map((e, i) => [a[i], b[i]])\n} \n","import L from 'leaflet'\n\n/**\n * Makes {@link L.Popup} draggable and proxies all {@link L.Draggable} events.\n * \n * @example\n * let DraggablePopup = DraggablePopupMixin(L.Popup)\n * let popup = new DraggablePopup().setContent('I am draggable!')\n * \n * @param {class} base The base class.\n * @return {class} The base class with DraggablePopupMixin.\n */\nexport function DraggablePopupMixin (base) {\n  return class extends base {\n    constructor (options={}, source) {\n      options.className = options.className || 'leaflet-popup-draggable'\n      super(options, source)\n    }\n    \n    onAdd (map) {\n      super.onAdd(map)\n      this._draggable = new L.Draggable(this._container, this._wrapper)\n      this._draggable.enable()\n      this._draggable.on('drag', e => {\n        // Popup.setContent() resets to the pre-drag position and doesn't use L.DomUtil.setPosition\n        // the code below works around that\n        let pos = L.DomUtil.getPosition(this._wrapper.parentNode)\n        let latlng = map.layerPointToLatLng(pos)\n        this.setLatLng(latlng)\n        this.fire('drag', e)\n      })\n      this._draggable.on('dragstart predrag dragend', e => this.fire(e.type, e))\n    }\n    \n    onRemove (map) {\n      this._draggable.disable()\n      super.onRemove(map)\n    }\n  }\n}\n","import L from 'leaflet'\n\nimport {getLanguageString as i18n, stringifyUnit, getCategory} from 'covutils'\n\n/**\n * A popup that contains the parameter values of the given coverage layers at the location of the popup.\n * \n * The popup content is updated when one of the following occurs:\n * - popup is added to a map\n * - popup location is changed\n * - coverage layer is added or removed\n * - updateData() is called\n * \n * @extends {L.Popup}\n */\nexport class ValuePopup extends L.Popup {\n  /**\n   * @param {Object} [options] The options object.\n   * @param {number} [options.maxDistanceForPointsInPx=20]\n   *   The maximum distance in pixels from the popup location for which point-data values should be included.\n   * @param {Array<DataLayer>} [options.layers] An initial set of coverage data layers.\n   * @param {L.Layer} [source] Used to tag the popup with a reference to the Layer to which it refers.\n   */\n  constructor (options, source) {\n    super(options, source)\n    let layers = this.options.layers || []\n    this._maxDistanceForPointsInPx = this.options.maxDistanceForPointsInPx || 20\n\n    /**\n     * The coverage data layers added to this popup.\n     * \n     * @type {Set<DataLayer>}\n     */\n    this.coverageLayers = new Set(layers.filter(layer => layer.getValueAt))\n  }\n  \n  /**\n   * @param {DataLayer} layer The data layer to add.\n   * @return {this}\n   */\n  addCoverageLayer (layer) {\n    if (!layer.getValueAt) return this\n    this.coverageLayers.add(layer)\n    this.updateData()\n    return this\n  }\n  \n  /**\n   * @param {DataLayer} layer The data layer to remove.\n   * @return {this}\n   */\n  removeCoverageLayer (layer) {\n    this.coverageLayers.delete(layer)\n    this.updateData()\n    return this\n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  onAdd (map) {\n    this._map = map\n    super.onAdd(map)\n    this.updateData()\n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  onRemove (map) {\n    super.onRemove(map)\n    this._map = null\n  }\n  \n  /**\n   * @ignore\n   * @override\n   */\n  setLatLng (latlng) {\n    super.setLatLng(latlng)\n    this.updateData()\n    return this\n  }\n  \n  /**\n   * Returns whether there is any non-missing coverage data at the current popup location.\n   * This function only works after the popup has been added to the map.\n   * \n   * @return {boolean}\n   */\n  hasData () {\n    return this._hasData\n  }\n  \n  /**\n   * Updates the popup content from the data layers.\n   * Gets called automatically when `setLatLng` is called.\n   * \n   * @return {this}\n   */\n  updateData () {\n    if (!this._map) return\n    let html = ''\n      \n    let latlng = this.getLatLng()\n      \n    for (let layer of this.coverageLayers) {      \n      let maxDistance = getMetersPerPixel(this._map) * this._maxDistanceForPointsInPx\n      let val = layer.getValueAt(latlng, maxDistance)\n      if (val == null) continue\n      let param = layer.parameter\n      \n      let unit = !param.observedProperty.categories ? stringifyUnit(param.unit) : ''\n      if (param.categoryEncoding) {\n        let cat = getCategory(param, val)\n        val = i18n(cat.label)\n      }  \n      html += '<div><strong>' + i18n(param.observedProperty.label) + '</strong>: ' + val + ' ' + unit + '</div>'\n    }\n    if (!html) {\n      this._hasData = false\n      html = 'No data.'\n    }\n    this._hasData = true\n    this.setContent(html)\n    return this\n  }\n}\n\nfunction getMetersPerPixel (map) {\n  // from L.Control.Scale\n  let bounds = map.getBounds()\n  let centerLat = bounds.getCenter().lat\n  let halfWorldMeters = 6378137 * Math.PI * Math.cos(centerLat * Math.PI / 180)\n  let dist = halfWorldMeters * (bounds.getNorthEast().lng - bounds.getSouthWest().lng) / 180\n  let size = map.getSize()\n  let perpx = dist / size.x\n  return perpx\n}\n","import {DraggablePopupMixin} from './DraggablePopupMixin.js'\nimport {ValuePopup} from './ValuePopup.js'\n\n/**\n * Like {@link ValuePopup} but draggable and updates its content while dragging.\n * \n * @extends {ValuePopup}\n * @extends {DraggablePopupMixin}\n */\nexport class DraggableValuePopup extends DraggablePopupMixin(ValuePopup) {}"],"names":["$$","selector","parent","document","querySelector","$","querySelectorAll","HTML","html","div","createElement","innerHTML","element","firstChild","inject","css","body","appendChild","style","type","styleSheet","cssText","createTextNode","head","fromTemplate","id","node","content","importNode","children","DEFAULT_TEMPLATE_ID","DEFAULT_TEMPLATE","DiscreteLegend","covLayer","options","position","_covLayer","_templateId","templateId","_language","language","getElementById","on","_remove","remove","_update","_doUpdate","fullUpdate","el","_el","param","parameter","getLanguageTag","observedProperty","label","title","getLanguageString","palette","i","steps","cat","categories","red","green","blue","map","_map","update","off","L","Control","ContinuousLegend","unit","stringifyUnit","forEach","u","paletteExtent","low","high","toFixed","gradient","background","legend","layer","Evented","prototype","EventMixin","base","clazz","key","TimeAxis","_title","_axisListener","e","axis","timeSlices","dateMap","Map","t","dateTimestamp","Date","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getTime","has","set","get","push","_dateMap","DomEvent","disableClickPropagation","keys","dateStr","getUTCDateString","disabled","size","addEventListener","getUTCTimestampDateOnly","event","target","value","timeSlice","time","_initTimeSelect","fire","timeStr","covTime","toISOString","substr","timeSelect","times","length","year","parseInt","month","day","timestamp","iso","date","Dropdown","choices","_choices","_value","val","VerticalAxis","_position","crsVertAxis","crsVerticalAxis","name","vals","verticalSlices","toString","_dropdown","_getVerticalIndex","vertical","addTo","indexOf","Layer","commonjsHelpers.interopDefault","linearPalette","colors","directPalette","canvas","width","height","ctx","getContext","createLinearGradient","num","addColorStop","fillStyle","fillRect","Uint8Array","pix","getImageData","data","j","cssToRGB","cssColor","r","g","b","paletteFromObject","paletteSpec","interpolation","scale","extent","scaled","Math","trunc","enlargeExtentIfEqual","amount","buffer","PaletteManager","defaultSteps","_defaultSteps","_palettes","Array","isArray","every","arr","Error","_asUint8Array","add","undefined","Symbol","iterator","ta","DEFAULT_CONTINUOUS_PALETTE","DEFAULT_CATEGORICAL_PALETTE","n","slice","PaletteMixin","Promise","resolve","_initCategoryIdxMap","_palette","preferredPalette","preferredColor","_paletteExtent","hasOwnProperty","_extendMax","extendMax","_extendMin","extendMin","categoryEncoding","valIdxMap","_categoryIdxMap","max","getPaletteIndex","idx","canUsePalette","setPaletteExtent","then","_updatePaletteIndexFn","skipRedraw","oldExtent","hasChanged","newExtent","res","computePaletteExtent","isNaN","redraw","Infinity","min","encoding","category","p","CoverageMixin","promise","coverage","loadDomain","domain","getHorizontalCRSComponents","_projX","_projY","loadProjection","projection","proj","_loadCoverageSubset","loadRange","range","catch","console","error","Grid","cov","valueToColor","isDomain","fromDomain","parameters","next","Util","setOptions","_cov","_param","_axesSubset","coordPref","z","load","initializePalette","vertRef","getReferenceObject","coordinates","vertRefSys","system","cs","csAxes","axes","_errored","log","bbox","_getDomainBbox","p1","unproject","x","y","p2","p3","p4","latLngBounds","southWest","latLng","northEast","bounds","spec","Object","ax","values","subsetByValue","_subsetCov","subsetCov","cacheRanges","all","subsetDomain","subsetRange","_subsetDomain","_subsetRange","xlen","shape","ylen","minMaxOfRange","xconstraint","start","stop","step","round","yconstraint","subsetByIndex","getBounds","latlng","X","Y","lat","lng","project","lon","iy","indexOfNearest","ix","coords","tile","DomUtil","create","getTileSize","drawTile","tileSize","imgData","rgba","ndarray","setPixel","tileY","tileX","color","a","_isDomainUsingEllipsoidalCRS","_isRectilinearGeodeticMap","_drawGeodeticCRSWithRectilinearMapProjection","_drawGeodeticCRSWithAnyMapProjection","_drawProjectedCRSWithRectilinearMapProjection","_drawProjectedCRSWithAnyMapProjection","putImageData","xBounds","xend","xmin","xmax","xDescending","xAxis","yAxis","ymin","ymax","startX","startY","zoom","lonRange","point","wrapLongitude","iLat","iLon","lons","Float64Array","lats","latCache","iLatCache","Uint32Array","crs","recti","CRS","EPSG3857","EPSG4326","EPSG3395","Simple","isRecti","referencing","some","isEllipsoidalCRS","ref","getContainer","GridLayer","call","old","ArrayBuffer","isView","wrapNum","CircleMarkerMixin","getValue","showNoData","_getColor","getLatLng","strokeBrightness","_marker","circleMarker","fillColor","fillOpacity","radius","stroke","opacity","weight","_popup","bindPopup","removeLayer","args","openPopup","closePopup","__updateMarker","DEFAULT_COLOR","Point","paramKey","_defaultColor","defaultColor","_addMarker","_removeMarker","maxDistance","distanceTo","Trajectory","_addTrajectoryLayers","points","getLatLngs","marker","CircleMarker","_getValue","addLayer","polyline","coord","distances","minDistance","minIdx","distance","index","composite","clearLayers","FeatureGroup","PointSeries","v","Node","obj","dimension","left","right","kdTree","metric","dimensions","self","buildTree","depth","dim","median","sort","floor","loadTree","root","restoreParent","toJSON","src","dest","insert","innerSearch","insertPosition","newNode","nodeSearch","removeNode","nextNode","nextObj","pDimension","findMin","own","nearest","maxNodes","result","bestNodes","BinaryHeap","nearestSearch","bestChild","ownDistance","linearPoint","linearDistance","otherChild","saveNode","pop","peek","abs","balanceFactor","count","scoreFunction","bubbleUp","end","sinkDown","len","parentN","elemScore","child2N","child1N","swap","child1","child1Score","child2","child2Score","PointCollection","covcoll","_covcoll","_pointClass","pointClass","_layerGroup","layerGroup","_layers","_kdtree","_layerLoadCount","_layerErrors","pointOptionsFn","opts","coverages","_attachListeners","_popupFn","popup","fn","once","_fireIfOnAddDone","errors","_initKdtree","point1","point2","LatLng","layers","filter","contains","VerticalProfile","VerticalProfileCollection","_vertical","MultiPolygon","_unproject","_addPolygons","_pointInPolygonPreprocess","_polygonsLonLat","polygon","ring","_removePolygons","_geojson","getCenter","polygons","isCartesian","ensureClockwisePolygon","_pointInPolygons","getPointInPolygonsFn","geojson","geoJson","feature","properties","onEachFeature","_updatePolygons","PolygonSeries","_addPolygon","_polygonLonLat","_removePolygon","pointInPolygons","_pointInPolygon","_updatePolygon","COVJSON_PREFIX","COVJSON_CORE_NS","COVJSON_DOMAINTYPES_NS","COVJSON_POINT","COVJSON_POINTSERIES","COVJSON_VERTICALPROFILE","COVJSON_GRID","COVJSON_TRAJECTORY","COVJSON_POLYGONSERIES","COVJSON_MULTIPOLYGON","COVJSON_DATATYPE_TUPLE","COVJSON_DATATYPE_POLYGON","DOMAIN_LAYER_CLASSES","COLLECTION_LAYER_CLASSES","dataLayer","dataLayerClass","coll","COVERAGECOLLECTION","domainType","COVERAGE","DOMAIN","defaultMatch","symbol","idMissing","cat1","cat2","ParameterSync","_syncProps","syncProperties","_match","match","_paramLayers","_layerListeners","_propSyncing","Set","params","from","find","_syncProperties","_registerLayerListeners","syncLayer","SyncLayer","paused","sync","delete","listeners","_removeLayer","prop","_syncProperty","propreduce","unified","l","reduce","layer_","Class","paramSync","defineProperty","enumerable","VerticalProfilePlot","maxWidth","_covs","_precision","precision","_labels","labels","keyGroups","group","_paramKeyGroups","_paramKeys","domainPromise","rangePromise","loadRanges","domains","ranges","_domains","_ranges","_addPlotToPopup","paramKeyGroup","plot","_getPlotElement","select","refParam","_getRefParam","option","text","removeChild","setContent","covsWithParamKey","zip","refCov","refParamKey","refDomain","zName","zUnit","vertSrs","xLabel","obsPropLabel","xs","columns","names","xname","yname","zVals","c3","generate","bindto","rotated","tick","format","toPrecision","grid","show","tooltip","d","ratio","enabled","rescale","Popup","TimeSeriesPlot","tVals","timeFormat","DraggablePopupMixin","source","className","_draggable","Draggable","_container","_wrapper","enable","pos","getPosition","parentNode","layerPointToLatLng","setLatLng","disable","ValuePopup","_maxDistanceForPointsInPx","maxDistanceForPointsInPx","coverageLayers","getValueAt","updateData","_hasData","getMetersPerPixel","getCategory","i18n","centerLat","halfWorldMeters","PI","cos","dist","getNorthEast","getSouthWest","getSize","perpx","DraggableValuePopup"],"mappings":"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"}